.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Image::ExifTool::Import 3pm"
.TH Image::ExifTool::Import 3pm "2016-05-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::ExifTool::Import \- Import CSV and JSON database files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Image::ExifTool::Import qw(ReadCSV ReadJSON);
\&
\&    $err = ReadCSV($csvFile, \e%database);
\&
\&    $err = ReadJSON($jsonfile, \e%database);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines for importing tag information from \s-1CSV \s0(Comma
Separated Value) and \s-1JSON \s0(JavaScript Object Notation) database files.
.SH "EXPORTS"
.IX Header "EXPORTS"
Exports nothing by default, but ReadCSV and ReadJSON may be exported.
.SH "METHODS"
.IX Header "METHODS"
.SS "ReadCSV / ReadJSON"
.IX Subsection "ReadCSV / ReadJSON"
Read \s-1CSV\s0 or \s-1JSON\s0 file into a database hash.
.IP "Inputs:" 4
.IX Item "Inputs:"
0) \s-1CSV\s0 file name or file reference.
.Sp
1) Hash reference for database object.
.Sp
2) Optional string used to represent an undefined (missing) tag value. 
(Used for deleting tags.)
.Sp
3) [ReadJSON only] Optional character set for converting Unicode escape
sequences in strings.  Defaults to \*(L"\s-1UTF8\*(R". \s0 See the ExifTool Charset option
for a list of valid settings.
.IP "Return Value:" 4
.IX Item "Return Value:"
These functions return an error string, or undef on success and populate the
database hash with entries from the \s-1CSV\s0 or \s-1JSON\s0 file.  Entries are keyed
based on the SourceFile column of the \s-1CSV\s0 or \s-1JSON\s0 information, and are
stored as hash lookups of tag name/value for each SourceFile.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2003\-2016, Phil Harvey (phil at owl.phy.queensu.ca)
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIImage::ExifTool\fR\|(3pm)
