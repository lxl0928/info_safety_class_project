.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Image::ExifTool::MWG 3pm"
.TH Image::ExifTool::MWG 3pm "2016-05-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::ExifTool::MWG \- Metadata Working Group support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # enable MWG Composite tags
\&    use Image::ExifTool::MWG;
\&    Image::ExifTool::MWG::Load();
\&
\&    # enable MWG strict mode
\&    $Image::ExifTool::MWG::strict = 1;
\&
\&    # disable MWG strict mode
\&    $Image::ExifTool::MWG::strict = 0;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1MWG\s0 module contains Composite tag definitions which are designed to
simplify implementation of the Metadata Working Group guidelines.  These
special \s-1MWG\s0 Composite tags are enabled by calling the \fILoad()\fR method:
.PP
.Vb 2
\&    use Image::ExifTool::MWG;
\&    Image::ExifTool::MWG::Load();
.Ve
.PP
By default, loading the \s-1MWG\s0 Composite tags enables \*(L"strict \s-1MWG\s0 conformance\*(R"
unless previously enabled or disabled by the user.  In this mode, ExifTool
will generate a Warning instead of extracting \s-1EXIF, IPTC\s0 and \s-1XMP\s0 from
non-standard locations.  The strict mode may be disabled or enabled at any
time by setting the \s-1MWG \s0\*(L"strict\*(R" flag to 0 or 1.  eg)
.PP
.Vb 1
\&    $Image::ExifTool::MWG::strict = 0;
.Ve
.PP
This module also contains the \s-1MWG XMP\s0 tags which are loaded automatically by
ExifTool as required, and are independent of the \s-1MWG\s0 Composite tags which
must be loaded explicitly as described above.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2003\-2016, Phil Harvey (phil at owl.phy.queensu.ca)
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "<http://www.metadataworkinggroup.org/>" 4
.IX Item "<http://www.metadataworkinggroup.org/>"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"\s-1MWG\s0 Tags\*(R" in Image::ExifTool::TagNames,
\&\fIImage::ExifTool\fR\|(3pm)
