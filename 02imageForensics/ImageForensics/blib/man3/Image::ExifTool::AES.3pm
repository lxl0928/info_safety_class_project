.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Image::ExifTool::AES 3pm"
.TH Image::ExifTool::AES 3pm "2016-05-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::ExifTool::AES \- AES encryption with cipher\-block chaining
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Image::ExifTool::AES qw(Crypt);
\&
\&  $err = Crypt(\e$plaintext, $key, 1);   # encryption
\&
\&  $err = Crypt(\e$ciphertext, $key);     # decryption
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains an implementation of the \s-1AES\s0 encryption/decryption
algorithms with cipher-block chaining (\s-1CBC\s0) and \s-1RFC 2898 PKCS\s0 #5 padding.
This is the \s-1AESV2\s0 and \s-1AESV3\s0 encryption mode used in \s-1PDF\s0 documents.
.SH "EXPORTS"
.IX Header "EXPORTS"
Exports nothing by default, but \*(L"Crypt\*(R" may be exported.
.SH "METHODS"
.IX Header "METHODS"
.SS "Crypt"
.IX Subsection "Crypt"
Implement \s-1AES\s0 encryption/decryption with cipher-block chaining.
.IP "Inputs:" 4
.IX Item "Inputs:"
0) Scalar reference for data to encrypt/decrypt.
.Sp
1) Encryption key string (must have length 16, 24 or 32).
.Sp
2) [optional] Encrypt flag (false to decrypt).
.Sp
3) [optional] Flag to avoid removing padding after decrypting, or to avoid
adding 16 bytes of padding before encrypting when data length is already a
multiple of 16 bytes.
.IP "Returns:" 4
.IX Item "Returns:"
On success, the return value is undefined and the data is encrypted or
decrypted as specified.  Otherwise returns an error string and the data is
left in an indeterminate state.
.IP "Notes:" 4
.IX Item "Notes:"
The length of the encryption key dictates the \s-1AES\s0 mode, with lengths of 16,
24 and 32 bytes resulting in \s-1AES\-128, AES\-192\s0 and \s-1AES\-256.\s0
.Sp
When encrypting, the input data may be any length and will be padded to an
even 16\-byte block size using the specified padding technique.  If the
encrypt flag has length 16, it is used as the initialization vector for
the cipher-block chaining, otherwise a random \s-1IV\s0 is generated.  Upon
successful return the data will be encrypted, with the first 16 bytes of
the data being the \s-1CBC IV.\s0
.Sp
When decrypting, the input data begins with the 16\-byte \s-1CBC\s0 initialization
vector.
.SH "BUGS"
.IX Header "BUGS"
This code is blindingly slow.  But in truth, slowing down processing is the
main purpose of encryption, so this really can't be considered a bug.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2003\-2016, Phil Harvey (phil at owl.phy.queensu.ca)
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "<http://www.hoozi.com/Articles/AESEncryption.htm>" 4
.IX Item "<http://www.hoozi.com/Articles/AESEncryption.htm>"
.PD 0
.IP "<http://www.csrc.nist.gov/publications/fips/fips197/fips\-197.pdf>" 4
.IX Item "<http://www.csrc.nist.gov/publications/fips/fips197/fips-197.pdf>"
.IP "<http://www.faqs.org/rfcs/rfc3602.html>" 4
.IX Item "<http://www.faqs.org/rfcs/rfc3602.html>"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIImage::ExifTool\fR\|(3pm)
