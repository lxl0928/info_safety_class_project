.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Image::ExifTool::Shift 3pm"
.TH Image::ExifTool::Shift 3pm "2016-05-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::ExifTool::Shift.pl \- ExifTool time shifting routines
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines used by ExifTool to shift date and time
values.
.SH "DETAILS"
.IX Header "DETAILS"
Time shifts are applied to standard EXIF-formatted date/time values (eg.
\&\f(CW\*(C`2005:03:14 18:55:00\*(C'\fR).  Date-only and time-only values may also be
shifted, and an optional timezone (eg. \f(CW\*(C`\-05:00\*(C'\fR) is also supported.  Here
are some general rules and examples to explain how shift strings are
interpreted:
.PP
Date-only values are shifted using the following formats:
.PP
.Vb 3
\&    \*(AqY:M:D\*(Aq     \- shift date by \*(AqY\*(Aq years, \*(AqM\*(Aq months and \*(AqD\*(Aq days
\&    \*(AqM:D\*(Aq       \- shift months and days only
\&    \*(AqD\*(Aq         \- shift specified number of days
.Ve
.PP
Time-only values are shifted using the following formats:
.PP
.Vb 3
\&    \*(Aqh:m:s\*(Aq     \- shift time by \*(Aqh\*(Aq hours, \*(Aqm\*(Aq minutes and \*(Aqs\*(Aq seconds
\&    \*(Aqh:m\*(Aq       \- shift hours and minutes only
\&    \*(Aqh\*(Aq         \- shift specified number of hours
.Ve
.PP
Timezone shifts are specified in the following formats:
.PP
.Vb 4
\&    \*(Aq+h:m\*(Aq      \- shift timezone by \*(Aqh\*(Aq hours and \*(Aqm\*(Aq minutes
\&    \*(Aq\-h:m\*(Aq      \- negative shift of timezone hours and minutes
\&    \*(Aq+h\*(Aq        \- shift timezone hours only
\&    \*(Aq\-h\*(Aq        \- negative shift of timezone hours only
.Ve
.PP
A valid shift value consists of one or two arguments, separated by a space.
If only one is provided, it is assumed to be a time shift when applied to a
time-only or a date/time value, or a date shift when applied to a date-only
value.  For example:
.PP
.Vb 5
\&    \*(Aq1\*(Aq         \- shift by 1 hour if applied to a time or date/time
\&                  value, or by one day if applied to a date value
\&    \*(Aq2:0\*(Aq       \- shift 2 hours (time, date/time), or 2 months (date)
\&    \*(Aq5:0:0\*(Aq     \- shift 5 hours (time, date/time), or 5 years (date)
\&    \*(Aq0:0:1\*(Aq     \- shift 1 s (time, date/time), or 1 day (date)
.Ve
.PP
If two arguments are given, the date shift is first, followed by the time
shift:
.PP
.Vb 3
\&    \*(Aq3:0:0 0\*(Aq         \- shift date by 3 years
\&    \*(Aq0 15:30\*(Aq         \- shift time by 15 hours and 30 minutes
\&    \*(Aq1:0:0 0:0:0+5:0\*(Aq \- shift date by 1 year and timezone by 5 hours
.Ve
.PP
A date shift is simply ignored if applied to a time value or visa versa.
.PP
Numbers specified in shift fields may contain a decimal point:
.PP
.Vb 3
\&    \*(Aq1.5\*(Aq       \- 1 hour 30 minutes (time, date/time), or 1 day (date)
\&    \*(Aq2.5 0\*(Aq     \- 2 days 12 hours (date/time), 12 hours (time) or
\&                  2 days (date)
.Ve
.PP
And to save typing, a zero is assumed for any missing numbers:
.PP
.Vb 3
\&    \*(Aq1::\*(Aq       \- shift by 1 hour (time, date/time) or 1 year (date)
\&    \*(Aq26:: 0\*(Aq    \- shift date by 26 years
\&    \*(Aq+:30       \- shift timezone by 30 minutes
.Ve
.PP
Below are some specific examples applied to real date and/or time values
('Dir' is the applied shift direction: '+' is positive, '\-' is negative):
.PP
.Vb 10
\&     Original Value         Shift   Dir    Shifted Value
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-\-  \-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    \*(Aq20:30:00\*(Aq             \*(Aq5\*(Aq       +   \*(Aq01:30:00\*(Aq
\&    \*(Aq2005:01:27\*(Aq           \*(Aq5\*(Aq       +   \*(Aq2005:02:01\*(Aq
\&    \*(Aq2005:01:27 20:30:00\*(Aq  \*(Aq5\*(Aq       +   \*(Aq2005:01:28 01:30:00\*(Aq
\&    \*(Aq11:54:00\*(Aq             \*(Aq2.5 0\*(Aq   \-   \*(Aq23:54:00\*(Aq
\&    \*(Aq2005:11:02\*(Aq           \*(Aq2.5 0\*(Aq   \-   \*(Aq2005:10:31\*(Aq
\&    \*(Aq2005:11:02 11:54:00\*(Aq  \*(Aq2.5 0\*(Aq   \-   \*(Aq2005:10:30 23:54:00\*(Aq
\&    \*(Aq2004:02:28 08:00:00\*(Aq  \*(Aq1 1.3\*(Aq   +   \*(Aq2004:02:29 09:18:00\*(Aq
\&    \*(Aq07:00:00\*(Aq             \*(Aq\-5\*(Aq      +   \*(Aq07:00:00\*(Aq
\&    \*(Aq07:00:00+01:00\*(Aq       \*(Aq\-5\*(Aq      +   \*(Aq07:00:00\-04:00\*(Aq
\&    \*(Aq07:00:00Z\*(Aq            \*(Aq+2:30\*(Aq   \-   \*(Aq07:00:00\-02:30\*(Aq
\&    \*(Aq1970:01:01\*(Aq           \*(Aq35::\*(Aq    +   \*(Aq2005:01:01\*(Aq
\&    \*(Aq2005:01:01\*(Aq           \*(Aq400\*(Aq     +   \*(Aq2006:02:05\*(Aq
\&    \*(Aq10:00:00.00\*(Aq          \*(Aq::1.33\*(Aq  \-   \*(Aq09:59:58.67\*(Aq
.Ve
.SH "NOTES"
.IX Header "NOTES"
The format of the original date/time value is not changed when the time
shift is applied.  This means that the length of the date/time string will
not change, and only the numbers in the string will be modified.  The only
exception to this rule is that a 'Z' timezone is changed to '+00:00'
notation if a timezone shift is applied.  A timezone will not be added to
the date/time string.
.SH "TRICKY"
.IX Header "TRICKY"
This module is perhaps more complicated than it needs to be because it is
designed to be very flexible in the way time shifts are specified and
applied...
.PP
The ability to shift dates by Y years, M months, etc, conflicts with the
design goal of maintaining a constant shift for all time values when
applying a batch shift.  This is because shifting by 1 month can be
equivalent to anything from 28 to 31 days, and 1 year can be 365 or 366
days, depending on the starting date.
.PP
The inconsistency is handled by shifting the first tag found with the actual
specified shift, then calculating the equivalent time difference in seconds
for this shift and applying this difference to subsequent tags in a batch
conversion.  So if it works as designed, the behaviour should be both
intuitive and mathematically correct, and the user shouldn't have to worry
about details such as this (in keeping with Perl's \*(L"do the right thing\*(R"
philosophy).
.SH "BUGS"
.IX Header "BUGS"
Due to the use of the standard time library functions, dates are typically
limited to the range 1970 to 2038 on 32\-bit systems.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2003\-2016, Phil Harvey (phil at owl.phy.queensu.ca)
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIImage::ExifTool\fR\|(3pm)
