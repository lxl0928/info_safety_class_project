.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Image::ExifTool 3pm"
.TH Image::ExifTool 3pm "2016-05-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::ExifTool \- Read and write meta information
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Image::ExifTool qw(:Public);
\&
\&  # \-\-\-\- Simple procedural usage \-\-\-\-
\&
\&  # Get hash of meta information tag names/values from an image
\&  $info = ImageInfo(\*(Aqa.jpg\*(Aq);
\&
\&  # \-\-\-\- Object\-oriented usage \-\-\-\-
\&
\&  # Create a new Image::ExifTool object
\&  $exifTool = new Image::ExifTool;
\&
\&  # Extract meta information from an image
\&  $exifTool\->ExtractInfo($file, \e%options);
\&
\&  # Get list of tags in the order they were found in the file
\&  @tagList = $exifTool\->GetFoundTags(\*(AqFile\*(Aq);
\&
\&  # Get the value of a specified tag
\&  $value = $exifTool\->GetValue($tag, $type);
\&
\&  # Get a tag description
\&  $description = $exifTool\->GetDescription($tag);
\&
\&  # Get the group name associated with this tag
\&  $group = $exifTool\->GetGroup($tag, $family);
\&
\&  # Set a new value for a tag
\&  $exifTool\->SetNewValue($tag, $newValue);
\&
\&  # Write new meta information to a file
\&  $success = $exifTool\->WriteInfo($srcfile, $dstfile);
\&
\&  # ...plus a host of other useful methods...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Reads and writes meta information in a wide variety of files, including the
maker notes of many digital cameras by various manufacturers such as Canon,
Casio, \s-1FLIR,\s0 FujiFilm, \s-1GE, HP,\s0 JVC/Victor, Kodak, Leaf,
Minolta/Konica\-Minolta, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica,
Pentax/Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and
Sony.
.PP
Below is a list of file types and meta information formats currently
supported by ExifTool (r = read, w = write, c = create):
.PP
.Vb 10
\&  File Types
\&  \-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-
\&  3FR   r     | DV    r     | K25   r     | OFR   r     | RSRC  r
\&  3G2   r/w   | DVB   r/w   | KDC   r     | OGG   r     | RTF   r
\&  3GP   r/w   | DYLIB r     | KEY   r     | OGV   r     | RW2   r/w
\&  A     r     | EIP   r     | LA    r     | ORF   r/w   | RWL   r/w
\&  AA    r     | EPS   r/w   | LFP   r     | OTF   r     | RWZ   r
\&  AAX   r/w   | EPUB  r     | LNK   r     | PAC   r     | RM    r
\&  ACR   r     | ERF   r/w   | M2TS  r     | PAGES r     | SEQ   r
\&  AFM   r     | EXE   r     | M4A/V r/w   | PBM   r/w   | SO    r
\&  AI    r/w   | EXIF  r/w/c | MEF   r/w   | PCD   r     | SR2   r/w
\&  AIFF  r     | EXR   r     | MIE   r/w/c | PDB   r     | SRF   r
\&  APE   r     | EXV   r/w/c | MIFF  r     | PDF   r/w   | SRW   r/w
\&  ARW   r/w   | F4A/V r/w   | MKA   r     | PEF   r/w   | SVG   r
\&  ASF   r     | FFF   r/w   | MKS   r     | PFA   r     | SWF   r
\&  AVI   r     | FLA   r     | MKV   r     | PFB   r     | THM   r/w
\&  AZW   r     | FLAC  r     | MNG   r/w   | PFM   r     | TIFF  r/w
\&  BMP   r     | FLV   r     | MOBI  r     | PGF   r     | TORRENT r
\&  BTF   r     | FPF   r     | MODD  r     | PGM   r/w   | TTC   r
\&  CHM   r     | FPX   r     | MOI   r     | PLIST r     | TTF   r
\&  COS   r     | GIF   r/w   | MOS   r/w   | PICT  r     | VCF   r
\&  CR2   r/w   | GZ    r     | MOV   r/w   | PMP   r     | VRD   r/w/c
\&  CRW   r/w   | HDP   r/w   | MP3   r     | PNG   r/w   | VSD   r
\&  CS1   r/w   | HDR   r     | MP4   r/w   | PPM   r/w   | WAV   r
\&  DCM   r     | HTML  r     | MPC   r     | PPT   r     | WDP   r/w
\&  DCP   r/w   | ICC   r/w/c | MPG   r     | PPTX  r     | WEBP  r
\&  DCR   r     | ICS   r     | MPO   r/w   | PS    r/w   | WEBM  r
\&  DFONT r     | IDML  r     | MQV   r/w   | PSB   r/w   | WMA   r
\&  DIVX  r     | IIQ   r/w   | MRW   r/w   | PSD   r/w   | WMV   r
\&  DJVU  r     | IND   r/w   | MXF   r     | PSP   r     | WV    r
\&  DLL   r     | INX   r     | NEF   r/w   | QTIF  r/w   | X3F   r/w
\&  DNG   r/w   | ISO   r     | NRW   r/w   | RA    r     | XCF   r
\&  DOC   r     | ITC   r     | NUMBERS r   | RAF   r/w   | XLS   r
\&  DOCX  r     | J2C   r     | O     r     | RAM   r     | XLSX  r
\&  DPX   r     | JNG   r/w   | ODP   r     | RAR   r     | XMP   r/w/c
\&  DR4   r/w/c | JP2   r/w   | ODS   r     | RAW   r/w   | ZIP   r
\&  DSS   r     | JPEG  r/w   | ODT   r     | RIFF  r     |
\&
\&  Meta Information
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  EXIF           r/w/c  |  CIFF           r/w  |  Ricoh RMETA    r
\&  GPS            r/w/c  |  AFCP           r/w  |  Picture Info   r
\&  IPTC           r/w/c  |  Kodak Meta     r/w  |  Adobe APP14    r
\&  XMP            r/w/c  |  FotoStation    r/w  |  MPF            r
\&  MakerNotes     r/w/c  |  PhotoMechanic  r/w  |  Stim           r
\&  Photoshop IRB  r/w/c  |  JPEG 2000      r    |  DPX            r
\&  ICC Profile    r/w/c  |  DICOM          r    |  APE            r
\&  MIE            r/w/c  |  Flash          r    |  Vorbis         r
\&  JFIF           r/w/c  |  FlashPix       r    |  SPIFF          r
\&  Ducky APP12    r/w/c  |  QuickTime      r    |  DjVu           r
\&  PDF            r/w/c  |  Matroska       r    |  M2TS           r
\&  PNG            r/w/c  |  MXF            r    |  PE/COFF        r
\&  Canon VRD      r/w/c  |  PrintIM        r    |  AVCHD          r
\&  Nikon Capture  r/w/c  |  FLAC           r    |  ZIP            r
\&  GeoTIFF        r/w/c  |  ID3            r    |  (and more)
.Ve
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
User-defined tags can be added via the ExifTool configuration file, or by
defining the \f(CW%Image::ExifTool::UserDefined\fR hash before calling any ExifTool
methods.  See \*(L"ExifTool_config\*(R" in the ExifTool distribution for more
details.
.PP
By default ExifTool looks for a configuration file named \*(L".ExifTool_config\*(R"
first in your home directory, then in the directory of the application
script, but a different directory may be specified by setting the
\&\s-1EXIFTOOL_HOME\s0 environment variable, or a different file may be specified by
setting the ExifTool \f(CW\*(C`configFile\*(C'\fR variable before using Image::ExifTool. 
For example:
.PP
.Vb 2
\&    BEGIN { $Image::ExifTool::configFile = \*(Aq/Users/phil/myconfig.cfg\*(Aq }
\&    use Image::ExifTool;
.Ve
.PP
The configuration feature may also be disabled by setting \f(CW\*(C`configFile\*(C'\fR to
an empty string:
.PP
.Vb 2
\&    BEGIN { $Image::ExifTool::configFile = \*(Aq\*(Aq }
\&    use Image::ExifTool;
.Ve
.SH "EXPORTS"
.IX Header "EXPORTS"
Exports nothing by default, but \*(L"ImageInfo\*(R" and all static methods may be
exported with the \f(CW\*(C`:Public\*(C'\fR export list.
.SH "METHODS"
.IX Header "METHODS"
All ExifTool features are accessed through the methods of the public
interface listed below.  Other Image::ExifTool methods and modules should
not be accessed directly because their interface may change with future
versions.
.PP
None of these methods should ever die or issue warnings to \s-1STDERR\s0 if called
with the proper arguments (with the exception of \*(L"SetNewValue\*(R" which may
send an error message to \s-1STDERR,\s0 but only when called in scalar context).
Error and warning messages that occur during processing are stored in the
values of the Error and Warning tags, and are accessible via the
\&\*(L"GetValue\*(R" method to retrieve a single Error or Warning message, or
\&\*(L"GetInfo\*(R" to retrieve any number of them.
.PP
The ExifTool methods are not thread safe.
.SS "new"
.IX Subsection "new"
Creates a new ExifTool object.
.PP
.Vb 1
\&    $exifTool = new Image::ExifTool;
.Ve
.PP
Note that ExifTool uses \s-1AUTOLOAD\s0 to load non-member methods, so any class
using Image::ExifTool as a base class must define an \s-1AUTOLOAD\s0 which calls
\&\fIImage::ExifTool::DoAutoLoad()\fR.  eg)
.PP
.Vb 4
\&    sub AUTOLOAD
\&    {
\&        Image::ExifTool::DoAutoLoad($AUTOLOAD, @_);
\&    }
.Ve
.SS "ImageInfo"
.IX Subsection "ImageInfo"
Read image file and return meta information.  This is the one step function
for retrieving meta information from an image.  Internally, \*(L"ImageInfo\*(R"
calls \*(L"ExtractInfo\*(R" to extract the information, \*(L"GetInfo\*(R" to generate
the information hash, and \*(L"GetTagList\*(R" for the returned tag list.
.PP
.Vb 2
\&    # return meta information for 2 tags only (procedural)
\&    $info = ImageInfo($filename, $tag1, $tag2);
\&
\&    # return information about an open image file (object\-oriented)
\&    $info = $exifTool\->ImageInfo(\e*FILE);
\&
\&    # return information from image data in memory for specified tags
\&    %options = (PrintConv => 0);
\&    @tagList = qw(filename imagesize xmp:creator exif:* \-ifd1:*);
\&    $info = ImageInfo(\e$imageData, \e@tagList, \e%options);
\&
\&    # extract information from an embedded thumbnail image
\&    $info = ImageInfo(\*(Aqimage.jpg\*(Aq, \*(Aqthumbnailimage\*(Aq);
\&    $thumbInfo = ImageInfo($$info{ThumbnailImage});
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
\&\*(L"ImageInfo\*(R" is very flexible about the input arguments, and interprets
them based on their type.  It may be called with one or more arguments.
The one required argument is either a \s-1SCALAR \s0(the image file name), a file
reference (a reference to the image file) or a \s-1SCALAR\s0 reference (a
reference to the image in memory).  Other arguments are optional.  The
order of the arguments is not significant, except that the first \s-1SCALAR\s0 is
taken to be the file name unless a file reference or scalar reference comes
earlier in the argument list.
.Sp
Below is an explanation of how the \*(L"ImageInfo\*(R" function arguments are
interpreted:
.RS 4
.IP "ExifTool ref" 4
.IX Item "ExifTool ref"
\&\*(L"ImageInfo\*(R" may be called with an ExifTool object if desired.  Advantages
of using the object-oriented form are that options may be set before calling
\&\*(L"ImageInfo\*(R", and the object may be used afterward to access member
functions.  Must be the first argument if used.
.IP "\s-1SCALAR\s0" 4
.IX Item "SCALAR"
The first scalar argument is taken to be the file name unless an earlier
argument specified the image data via a file reference (file ref) or data
reference (\s-1SCALAR\s0 ref).  The remaining scalar arguments are names of tags
for requested information.  All tags are returned if no tags are specified.
.Sp
Tag names are case-insensitive and may be prefixed by optional group names
separated by colons.  A group name may begin with a family number (eg.
\&'1IPTC:Keywords'), to restrict matches to a specific family.  In the tag
name, a '?' matches any single character and a '*' matches zero or more
characters.  Thus 'GROUP:*' represents all tags in a specific group. 
Wildcards may not be used in group names, with the exception that a group
name of '*' may be used to extract all available instances of a tag
regardless of the \*(L"Duplicates\*(R" setting (eg. '*:WhiteBalance').  Multiple
groups may be specified (eg. 'EXIF:Time:*' extracts all \s-1EXIF\s0 Time tags). And
finally, a leading '\-' indicates a tag to be excluded (eg. '\-IFD1:*'), or a
trailing '#' causes the ValueConv value to be returned for this tag.
.Sp
Note that keys in the returned information hash and elements of the returned
tag list are not necessarily the same as these tag names because group names
are removed, the case may be changed, and an instance number may be added. 
For this reason it is best to use either the keys of the returned hash or
the elements of the returned tag list when accessing the tag values.
.Sp
See Image::ExifTool::TagNames for a complete
list of ExifTool tag names.
.IP "File ref" 4
.IX Item "File ref"
A reference to an open image file.  If you use this method (or a \s-1SCALAR\s0
reference) to access information in an image, the FileName and Directory
tags will not be returned.  (Also, a number of the File System tags will not
be returned unless it is a plain file.)  Image processing begins at the
current file position, and on return the file position is unspecified.  May
be either a standard filehandle, or a reference to a
File::RandomAccess object.  Note that the file remains
open and must be closed by the caller after \*(L"ImageInfo\*(R" returns.
.Sp
[Advanced:  To allow a non-rewindable stream (eg. a network socket) to be
re-read after processing with ExifTool, first wrap the file reference in a
File::RandomAccess object, then pass this object to
\&\*(L"ImageInfo\*(R".  The File::RandomAccess object will
buffer the file if necessary, and may be used to re-read the file after
\&\*(L"ImageInfo\*(R" returns.]
.IP "\s-1SCALAR\s0 ref" 4
.IX Item "SCALAR ref"
A reference to image data in memory.
.IP "\s-1ARRAY\s0 ref" 4
.IX Item "ARRAY ref"
Reference to a list of tag names.  On entry, any elements in the list are
added to the list of requested tags.  Tags with names beginning with '\-' are
excluded.  On return, this list is updated to contain an ordered list of tag
keys for the returned information.
.Sp
There will be 1:1 correspondence between the requested tags and the returned
tag keys only if the \*(L"Duplicates\*(R" option is 0 and \*(L"Sort\*(R" is 'Input'. 
(With \*(L"Duplicates\*(R" enabled, there may be more entries in the returned list
of tag keys, and with other \*(L"Sort\*(R" settings the entries may not be in the
same order as requested.)  If a requested tag doesn't exist, a tag key is
still generated, but the tag value is undefined.
.IP "\s-1HASH\s0 ref" 4
.IX Item "HASH ref"
Reference to a hash containing the options settings.  See \*(L"Options\*(R"
documentation below for a list of available options.  Options specified
as arguments to \*(L"ImageInfo\*(R" take precedence over \*(L"Options\*(R" settings.
.RE
.RS 4
.RE
.IP "Return Values:" 4
.IX Item "Return Values:"
\&\*(L"ImageInfo\*(R" returns a reference to a hash of tag key/value pairs.  The tag
keys are identifiers, which are similar to the tag names but may have an
appended instance number if multiple tags with the same name were extracted
from the image.  Many of the ExifTool functions require a tag key as an
argument. Use \*(L"GetTagName [static]\*(R" to get the tag name for a given tag
key.  Note that the case of the tag names may not be the same as requested.
Here is a simple example to print out the information returned by
\&\*(L"ImageInfo\*(R":
.Sp
.Vb 3
\&    foreach (sort keys %$info) {
\&        print "$_ => $$info{$_}\en";
\&    }
.Ve
.Sp
Values of the returned hash are usually simple scalars, but a scalar
reference is used to indicate binary data and an array reference may be used
to indicate a list.  Also, a hash reference may be returned if the \*(L"Struct\*(R"
option is used.  Lists of values are joined by commas into a single
string only if the PrintConv option is enabled and the List option is
disabled (which are the defaults).  Note that binary values are not
necessarily extracted unless specifically requested, or the Binary option is
enabled and the tag is not specifically excluded.  If not extracted the
value is a reference to a string of the form \*(L"Binary data ##### bytes\*(R".
.Sp
The code below gives an example of how to handle these return values, as
well as illustrating the use of other ExifTool functions:
.Sp
.Vb 10
\&    use Image::ExifTool;
\&    my $exifTool = new Image::ExifTool;
\&    $exifTool\->Options(Unknown => 1);
\&    my $info = $exifTool\->ImageInfo(\*(Aqa.jpg\*(Aq);
\&    my $group = \*(Aq\*(Aq;
\&    my $tag;
\&    foreach $tag ($exifTool\->GetFoundTags(\*(AqGroup0\*(Aq)) {
\&        if ($group ne $exifTool\->GetGroup($tag)) {
\&            $group = $exifTool\->GetGroup($tag);
\&            print "\-\-\-\- $group \-\-\-\-\en";
\&        }
\&        my $val = $info\->{$tag};
\&        if (ref $val eq \*(AqSCALAR\*(Aq) {
\&            if ($$val =~ /^Binary data/) {
\&                $val = "($$val)";
\&            } else {
\&                my $len = length($$val);
\&                $val = "(Binary data $len bytes)";
\&            }
\&        }
\&        printf("%\-32s : %s\en", $exifTool\->GetDescription($tag), $val);
\&    }
.Ve
.IP "Notes:" 4
.IX Item "Notes:"
ExifTool returns all values as byte strings of encoded characters.  Perl
wide characters are not used.  See \*(L"\s-1CHARACTER ENCODINGS\*(R"\s0 for details about
the encodings.  By default, most returned values are encoded in \s-1UTF\-8. \s0 For
these, \fIEncode::decode_utf8()\fR may be used to convert to a sequence of logical
Perl characters.
.Sp
As well as tags representing information extracted from the image, the
following Extra tags generated by
ExifTool may be returned:
.Sp
.Vb 1
\&    ExifToolVersion \- The ExifTool version number.
\&
\&    Error \- An error message if the image could not be processed.
\&
\&    Warning \- A warning message if problems were encountered while
\&              processing the image.
.Ve
.SS "Options"
.IX Subsection "Options"
Get/set ExifTool options.  This function can be called to set the default
options for an ExifTool object.  Options set this way are in effect for
all function calls but may be overridden by options passed as arguments
to some functions.  Option names are not case sensitive.
.PP
The default option values may be changed by defining a
\&\f(CW%Image::ExifTool::UserDefined::Options\fR hash.  See the ExifTool_config file
in the full ExifTool distribution for examples.
.PP
.Vb 2
\&    # exclude the \*(AqOwnerName\*(Aq tag from returned information
\&    $exifTool\->Options(Exclude => \*(AqOwnerName\*(Aq);
\&
\&    # only get information in EXIF or MakerNotes groups
\&    $exifTool\->Options(Group0 => [\*(AqEXIF\*(Aq, \*(AqMakerNotes\*(Aq]);
\&
\&    # ignore information from IFD1
\&    $exifTool\->Options(Group1 => \*(Aq\-IFD1\*(Aq);
\&
\&    # sort by groups in family 2, and extract unknown tags
\&    $exifTool\->Options(Sort => \*(AqGroup2\*(Aq, Unknown => 1);
\&
\&    # reset DateFormat option
\&    $exifTool\->Options(DateFormat => undef);
\&
\&    # do not extract duplicate tag names
\&    $oldSetting = $exifTool\->Options(Duplicates => 0);
\&
\&    # get current Verbose setting
\&    $isVerbose = $exifTool\->Options(\*(AqVerbose\*(Aq);
\&
\&    # set a user parameter
\&    $exifTool\->Options(UserParam => \*(AqMyParam=some value\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Option parameter name (case-insensitive)
.Sp
2) [optional] Option parameter value (may be undef to clear option)
.Sp
3\-N) [optional] Additional parameter/value pairs
.IP "Option Parameters:" 4
.IX Item "Option Parameters:"
.RS 4
.PD 0
.IP "Binary" 4
.IX Item "Binary"
.PD
Flag to extract the value data for all binary tags.  Tag values representing
large binary data blocks (eg. ThumbnailImage) are not necessarily extracted
unless this option is set or the tag is specifically requested by name.
Default is undef.
.IP "ByteOrder" 4
.IX Item "ByteOrder"
The byte order for newly created \s-1EXIF\s0 segments when writing.  Note that if
\&\s-1EXIF\s0 information already exists, the existing order is maintained.  Valid
values are '\s-1MM\s0', '\s-1II\s0' and undef.  If ByteOrder is not defined (the default),
then the maker note byte order is used (if they are being copied), otherwise
big-endian ('\s-1MM\s0') order is assumed.  This can also be set via the
ExifByteOrder tag, but the ByteOrder
option takes precedence if both are set.
.IP "Charset" 4
.IX Item "Charset"
Character set for encoding character tag values passed to/from ExifTool with
code points above U+007F.  Default is '\s-1UTF8\s0'.  Valid values are listed
below, case is not significant:
.Sp
.Vb 10
\&  Value        Alias(es)        Description
\&  \-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  UTF8         cp65001, UTF\-8   UTF\-8 characters
\&  Latin        cp1252, Latin1   Windows Latin1 (West European)
\&  Latin2       cp1250           Windows Latin2 (Central European)
\&  Cyrillic     cp1251, Russian  Windows Cyrillic
\&  Greek        cp1253           Windows Greek
\&  Turkish      cp1254           Windows Turkish
\&  Hebrew       cp1255           Windows Hebrew
\&  Arabic       cp1256           Windows Arabic
\&  Baltic       cp1257           Windows Baltic
\&  Vietnam      cp1258           Windows Vietnamese
\&  Thai         cp874            Windows Thai
\&  MacRoman     cp10000, Roman   Macintosh Roman
\&  MacLatin2    cp10029          Macintosh Latin2 (Central Europe)
\&  MacCyrillic  cp10007          Macintosh Cyrillic
\&  MacGreek     cp10006          Macintosh Greek
\&  MacTurkish   cp10081          Macintosh Turkish
\&  MacRomanian  cp10010          Macintosh Romanian
\&  MacIceland   cp10079          Macintosh Icelandic
\&  MacCroatian  cp10082          Macintosh Croatian
.Ve
.Sp
Note that this option affects some types of information when reading/writing
the file and other types when getting/setting tag values, so it must be
defined for both types of access.  See the \*(L"\s-1CHARACTER ENCODINGS\*(R"\s0 section
for more information about the handling of special characters.
.IP "CharsetEXIF" 4
.IX Item "CharsetEXIF"
Internal encoding to use for stored \s-1EXIF \*(L"ASCII\*(R"\s0 string values.  May also be
set to undef to pass through \s-1EXIF \*(L"ASCII\*(R"\s0 values without recoding.  Set to
\&\*(L"\s-1UTF8\*(R"\s0 to conform with the \s-1MWG\s0 recommendation.  Default is undef.
.IP "CharsetFileName" 4
.IX Item "CharsetFileName"
External character set used for file names passed to ExifTool functions. 
When set in Windows, this triggers use of Windows wide-character i/o library
routines (requires Win32API::File).  Default is undef.
.IP "CharsetID3" 4
.IX Item "CharsetID3"
Internal encoding to assume for ID3v1 strings.  By the specification ID3v1
strings should be encoded in \s-1ISO 8859\-1 \s0(essentially Latin), but some
applications may use local encoding instead.  Default is 'Latin'.
.IP "CharsetIPTC" 4
.IX Item "CharsetIPTC"
Fallback internal \s-1IPTC\s0 character set to assume if \s-1IPTC\s0 information contains
no CodedCharacterSet tag.  Possible values are the same as the \*(L"Charset\*(R"
option. Default is 'Latin'.
.Sp
Note that this option affects some types of information when reading/writing
the file and other types when getting/setting tag values, so it must be
defined for both types of access.
.IP "CharsetPhotoshop" 4
.IX Item "CharsetPhotoshop"
Internal encoding to assume for Photoshop \s-1IRB\s0 resource names.  Default is
\&'Latin'.
.IP "CharsetQuickTime" 4
.IX Item "CharsetQuickTime"
Internal encoding to assume for QuickTime strings stored with an unspecified
encoding.  Default is 'MacRoman'.
.IP "Compact" 4
.IX Item "Compact"
Flag to write compact output.  Default is undef.  The \s-1XMP\s0 specification
suggests that the data be padded with blanks to allow in-place editing. 
With this flag set the 2kB of padding is not written.  Note that this only
effects embedded \s-1XMP\s0 since padding is never written for stand-alone \s-1XMP\s0
files.
.IP "Composite" 4
.IX Item "Composite"
Flag to generate Composite tags when extracting information.  Default is 1.
.IP "Compress" 4
.IX Item "Compress"
Flag to write new values in compressed format if possible.  Has no effect
unless Compress::Zlib is installed.  Default is undef.
.IP "CoordFormat" 4
.IX Item "CoordFormat"
Format for printing \s-1GPS\s0 coordinates.  This is a printf format string with
specifiers for degrees, minutes and seconds in that order, however minutes
and seconds may be omitted.  If the hemisphere is known, a reference
direction (N, S, E or W) is appended to each printed coordinate, but adding
a \f(CW\*(C`+\*(C'\fR to the first format specifier (eg. \f(CW\*(C`%+.6f\*(C'\fR) prints a signed
coordinate instead.  For example, the following table gives the output for
the same coordinate using various formats:
.Sp
.Vb 6
\&      CoordFormat        Example Output
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  q{%d deg %d\*(Aq %.2f"}  54 deg 59\*(Aq 22.80"  (default for reading)
\&  q{%d %d %.8f}        54 59 22.80000000  (default for copying)
\&  q{%d deg %.4f min}   54 deg 59.3800 min
\&  q{%.6f degrees}      54.989667 degrees
.Ve
.Sp
Note:  To avoid loss of precision, the default coordinate format is
different when copying tags with \*(L"SetNewValuesFromFile\*(R".
.IP "DateFormat" 4
.IX Item "DateFormat"
Format for printing date/time values.  See \f(CW\*(C`strftime\*(C'\fR in the \s-1POSIX\s0
package for details about the format string.  The default is similar to a
format of \*(L"%Y:%m:%d \f(CW%H:\fR%M:%S\*(R".  If date can not be converted, value is left
unchanged unless the StrictDate option is set.  Timezones are ignored.
.IP "Duplicates" 4
.IX Item "Duplicates"
Flag to return values from tags with duplicate names when extracting
information.  Default is 1.
.IP "Escape" 4
.IX Item "Escape"
Escape special characters in extracted values for \s-1HTML\s0 or \s-1XML. \s0 Also
unescapes \s-1HTML\s0 or \s-1XML\s0 character entities in input values passed to
\&\*(L"SetNewValue\*(R".  Valid settings are '\s-1HTML\s0', '\s-1XML\s0' or undef.  Default is
undef.
.IP "Exclude" 4
.IX Item "Exclude"
Exclude specified tags from tags extracted from an image.  The option value
is either a tag name or reference to a list of tag names to exclude.  The
case of tag names is not significant.  This option is ignored for
specifically requested tags.  Tags may also be excluded by preceding their
name with a '\-' in the arguments to \*(L"ImageInfo\*(R".
.IP "ExtendedXMP" 4
.IX Item "ExtendedXMP"
This setting affects the reading and editing of extended \s-1XMP\s0 in \s-1JPEG\s0 images.
According to the \s-1XMP\s0 specification, extended \s-1XMP\s0 is only valid if it has the
\&\s-1GUID\s0 specified by the HasExtendedXMP tag.  ExifTool 9.95 and earlier would
read extended \s-1XMP\s0 regardless of \s-1GUID,\s0 but with the addition of this option
in version 9.96 the default behaviour was changed to conform with the \s-1XMP\s0
specification (to read only extended \s-1XMP\s0 with the proper \s-1GUID\s0).  This option
should be set to 2 to emulate pre\-9.96 behaviour and read all extended \s-1XMP. \s0
It may also be set to a \s-1GUID\s0 to read a specific extended \s-1XMP,\s0 or 0 to ignore
extended \s-1XMP\s0 entirely.
.Sp
.Vb 4
\&     0   \- ignore all extended XMP
\&     1   \- read extended XMP with valid GUID only (default)
\&     2   \- read extended XMP with any GUID
\&  <guid> \- read extended XMP with a specific GUID
.Ve
.IP "ExtractEmbedded" 4
.IX Item "ExtractEmbedded"
Flag to extract information from embedded documents in \s-1EPS\s0 files, embedded
\&\s-1EPS\s0 information and \s-1JPEG\s0 and Jpeg2000 images in \s-1PDF\s0 files, embedded \s-1MPF\s0
images in \s-1JPEG\s0 and \s-1MPO\s0 files, streaming metadata in \s-1AVCHD\s0 videos, and the
resource fork of Mac \s-1OS\s0 files.  Default is undef.
.IP "FastScan" 4
.IX Item "FastScan"
Flag to increase speed of extracting information from \s-1JPEG\s0 images.  With
this option set to 1, ExifTool will not scan to the end of a \s-1JPEG\s0 image to
check for an \s-1AFCP,\s0 CanonVRD, FotoStation, PhotoMechanic, \s-1MIE\s0 or PreviewImage
trailer.  This also stops the parsing after the first comment in \s-1GIF\s0 images,
and at the audio/video data with RIFF-format files (\s-1AVI, WAV,\s0 etc), so any
trailing metadata (eg. \s-1XMP\s0 written by some utilities) may be missed.  When
combined with the ScanForXMP option, prevents scanning for \s-1XMP\s0 in recognized
file types.  With a value of 2, ExifTool will also avoid extracting any \s-1EXIF\s0
MakerNote information.  When set to 3, the file is not actually parsed, and
only an initial guess at FileType and some pseudo tags are returned. 
Default is undef.
.IP "Filter" 4
.IX Item "Filter"
Perl expression used to filter values for all tags.  The expression acts on
the value of the Perl default variable ($_), and changes the value of this
variable as required.  Applies to all returned values unless PrintConv
option is disabled.
.IP "FixBase" 4
.IX Item "FixBase"
Fix maker notes base offset.  A common problem with image editing software
is that offsets in the maker notes are not adjusted properly when the file
is modified.  This may cause the wrong values to be extracted for some maker
note entries when reading the edited file.  FixBase specifies an integer
value to be added to the maker notes base offset.  It may also be set to the
empty string ('') for ExifTool will take its best guess at the correct base,
or undef (the default) for no base adjustment.
.IP "GeoMaxIntSecs" 4
.IX Item "GeoMaxIntSecs"
Maximum interpolation time in seconds for geotagging.  Geotagging is treated
as an extrapolation if the Geotime value lies between two fixes in the same
track which are separated by a number of seconds greater than this. 
Otherwise, the coordinates are calculated as a linear interpolation between
the nearest fixes on either side of the Geotime value.  Set to 0 to disable
interpolation and use the coordinates of the nearest fix instead (provided
it is within GeoMaxExtSecs, otherwise geotagging fails).  Default is 1800.
.IP "GeoMaxExtSecs" 4
.IX Item "GeoMaxExtSecs"
Maximum extrapolation time in seconds for geotagging.  Geotagging fails if
the Geotime value lies outside a \s-1GPS\s0 track by a number of seconds greater
than this.  Otherwise, the coordinates of the nearest fix are taken. 
Default is 1800.
.IP "GeoMaxHDOP" 4
.IX Item "GeoMaxHDOP"
Maximum Horizontal (2D) Dilution Of Precision for geotagging.  \s-1GPS\s0 fixes are
ignored if the \s-1HDOP\s0 is greater than this.  Default is undef.
.IP "GeoMaxPDOP" 4
.IX Item "GeoMaxPDOP"
Maximum Position (3D) Dilution Of Precision for geotagging.  \s-1GPS\s0 fixes are
ignored if the \s-1PDOP\s0 is greater than this.  Default is undef.
.IP "GeoMinSats" 4
.IX Item "GeoMinSats"
Minimum number of satellites for geotagging.  \s-1GPS\s0 fixes are ignored if the
number of acquired satellites is less than this.  Default is undef.
.IP "GlobalTimeShift" 4
.IX Item "GlobalTimeShift"
Time shift to apply to all extracted date/time PrintConv values.  Does not
affect ValueConv values.  Value is a date/time shift string (see
Image::ExifTool::Shift.pl), with a leading '\-'
for negative shifts.  Default is undef.
.IP "Group#" 4
.IX Item "Group#"
Extract tags only for specified groups in family # (Group0 assumed if #
not given).  The option value may be a single group name or a reference
to a list of groups.  Case is significant in group names.  Specify a group
to be excluded by preceding group name with a '\-'.  See \*(L"GetGroup\*(R" for a
description of group families, and \*(L"GetAllGroups [static]\*(R" for lists of
group names.
.IP "HtmlDump" 4
.IX Item "HtmlDump"
Dump information in hex to dynamic \s-1HTML\s0 web page.  The value may be 0\-3 for
increasingly larger limits on the maximum block size.  Default is 0.  Output
goes to the file specified by the TextOut option (\e*STDOUT by default).
.IP "HtmlDumpBase" 4
.IX Item "HtmlDumpBase"
Base for \s-1HTML\s0 dump offsets.  If not defined, the \s-1EXIF/TIFF\s0 base offset is
used.  Set to 0 for absolute offsets.  Default is undef.
.IP "IgnoreMinorErrors" 4
.IX Item "IgnoreMinorErrors"
Flag to ignore minor errors.  Causes minor errors to be downgraded to
warnings, and minor warnings to be ignored.  This option is provided mainly
to allow writing of files when minor errors occur, but by ignoring some
minor warnings the behaviour of ExifTool may be changed to allow some
questionable operations to proceed (such as extracting thumbnail and preview
images even if they don't have a recognizable header).  Minor errors and
warnings are denoted by \*(L"[minor]\*(R" at the start of the message, or \*(L"[Minor]\*(R"
(with a capital \*(L"M\*(R") for warnings that affect processing when ignored.
.IP "Lang" 4
.IX Item "Lang"
Localized language for exiftool tag descriptions, etc.  Available languages
are given by the Image::ExifTool::Lang module names (eg. 'fr', 'zh_cn').  If
the specified language isn't available, the option is not changed.  May be
set to undef to select the built-in default language.  Default is 'en'.
.IP "LargeFileSupport" 4
.IX Item "LargeFileSupport"
Flag to indicate that 64\-bit file offsets are supported on this system.
Default is undef.
.IP "List" 4
.IX Item "List"
Flag to extract lists of PrintConv values into arrays instead of joining
them into a string of values.  The \*(L"ListSep\*(R" option specifies the
separator used when combining values.  Default is undef.
.IP "ListItem" 4
.IX Item "ListItem"
Return only a specific item from List-type values.  A value of 0 returns the
first item in the list, 1 return the second item, etc.  Negative indices may
also be used, with \-1 representing the last item in the list.  Applies only
to the top-level list of nested lists.  Default is undef to return all items
in the list.
.IP "ListSep" 4
.IX Item "ListSep"
Separator string used to join lists of PrintConv values when \*(L"List\*(R" option
is not set.  Default is ', '.
.IP "ListSplit" 4
.IX Item "ListSplit"
Regular expression used to split values of list-type tags into individual
items when writing.  (eg. use ',\e\es*' to split a comma-separated list.) 
Default is undef.
.IP "MakerNotes" 4
.IX Item "MakerNotes"
Option to extract MakerNotes and other writable subdirectories (such as
PrintIM) as a data block.  Normally when the MakerNotes are extracted they
are rebuilt to include data outside the boundaries of the original maker
note data block, but a value of 2 disables this feature.  Possible values
are:
.Sp
.Vb 3
\&  0 \- Do not extract writable subdirectories (same as default of undef)
\&  1 \- Extract and rebuild maker notes into self\-contained block
\&  2 \- Extract without rebuilding maker notes
.Ve
.IP "MDItemTags" 4
.IX Item "MDItemTags"
Flag to extract the \s-1OS X\s0 metadata item tags (see the \*(L"mdls\*(R" man page for
details).
.IP "MissingTagValue" 4
.IX Item "MissingTagValue"
Value for missing tags in expressions evaluated by \*(L"SetNewValuesFromFile\*(R".
If not set, a minor error is issued for missing values, or the value is set
to '' if \*(L"IgnoreMinorErrors\*(R" is set.  Default is undef.
.IP "NoPDFList" 4
.IX Item "NoPDFList"
Flag to avoid splitting \s-1PDF\s0 List-type tag values into separate items.
Default is undef.
.IP "Password" 4
.IX Item "Password"
Password for reading/writing password-protected \s-1PDF\s0 documents.  Ignored if a
password is not required.  Character encoding of the password is determined
by the value of the Charset option at processing time.  Default is undef.
.IP "PNGEarlyXMP" 4
.IX Item "PNGEarlyXMP"
Flag to write \s-1XMP\s0 in \s-1PNG\s0 images before the \s-1IDAT \s0(image data) chunk.  By
default, ExifTool adds new \s-1XMP\s0 to the end of a \s-1PNG\s0 file (just before \s-1IEND\s0).
This is allowed by the \s-1PNG\s0 and \s-1XMP\s0 specifications, but some utilities seem
to ignore \s-1XMP\s0 if it comes after the image data.  The PNGEarlyXMP option
causes ExifTool to instead add new \s-1XMP\s0 before the \s-1PNG IDAT\s0 chunk.  However,
since ExifTool uses a single-pass writing algorithm, it has no way to tell
if \s-1XMP\s0 already exists later in the file before writing the new \s-1XMP\s0 in this
location.  If this happens, a minor error is issued when the extra \s-1XMP\s0 is
encountered, and the file is not written.  Adding the \*(L"IgnoreMinorErrors\*(R"
option causes the \s-1XMP\s0 after \s-1IDAT\s0 to be deleted, thus resolving the conflict
(at the expense of possible metadata loss), and allowing the file to be
written.  The PNGEarlyXMP option is applied automatically when deleting all
\&\s-1XMP\s0 and writing new \s-1XMP\s0 back in one step.  When reading, this option causes
a warning to be issued if standard \s-1XMP\s0 is found after the \s-1IDAT\s0 chunk.
.IP "PrintConv" 4
.IX Item "PrintConv"
Flag to enable automatic print conversion.  Also enables inverse
print conversion for writing.  Default is 1.
.IP "QuickTimeUTC" 4
.IX Item "QuickTimeUTC"
Flag set to assume that QuickTime date/time values are stored as \s-1UTC,\s0
causing conversion to local time when they are extracted.  According to the
QuickTime specification date/time values should be \s-1UTC,\s0 but many digital
cameras store local time instead (presumably because they don't know the
time zone), so the default is undef.  This option also disables the
autodetection of incorrect time-zero offsets in QuickTime date/time values,
and enforces a time zero of 1904 as per the QuickTime specification.
.IP "RequestAll" 4
.IX Item "RequestAll"
Flag to request all tags to be extracted.  This causes some tags to be
generated which normally would not be unless specifically requested (by
passing the tag name to \*(L"ImageInfo\*(R" or \*(L"ExtractInfo\*(R").  Note that this
flag is set automatically during a call to \*(L"SetNewValuesFromFile\*(R" to make
all tags available for copying.  Default is undef.
.IP "RequestTags" 4
.IX Item "RequestTags"
List of additional tags to request in next call to \*(L"ExtractInfo\*(R".  This
option is useful only for tags which aren't extracted unless specifically
requested.  Value may be a list reference, a delimited string of tag names
(any delimiter is allowed), or undef to clear the current RequestTags list. 
Case is not significant.  Default is undef.
.IP "ScanForXMP" 4
.IX Item "ScanForXMP"
Flag to scan all files (even unrecognized formats) for \s-1XMP\s0 information
unless \s-1XMP\s0 was already found in the file.  When combined with the FastScan
option, only unrecognized file types are scanned for \s-1XMP. \s0 Default is undef.
.IP "Sort" 4
.IX Item "Sort"
Specifies order to sort tags in returned list:
.Sp
.Vb 8
\&  Input  \- Sort in same order as input tag arguments (default)
\&  File   \- Sort in order that tags were found in the file
\&  Tag    \- Sort alphabetically by tag name
\&  Descr  \- Sort by tag description (for current Lang setting)
\&  Group# \- Sort by tag group, where # is zero or more family
\&           numbers separated by colons. If # is not specified,
\&           Group0 is assumed.  See GetGroup for a description
\&           of group families.
.Ve
.IP "Sort2" 4
.IX Item "Sort2"
Secondary sort order used for tags within each group when Sort is 'Group':
.Sp
.Vb 3
\&  File   \- Sort in order tags were found in the file (default)
\&  Tag    \- Sort alphabetically by tag name
\&  Descr  \- Sort by tag description (for current Lang setting)
.Ve
.IP "StrictDate" 4
.IX Item "StrictDate"
Flag to return undefined value for any date which can't be converted when
the DateFormat option is used.  Default is undef.
.IP "Struct" 4
.IX Item "Struct"
Flag to return \s-1XMP\s0 structures as hash references instead of flattening into
individual tags.  Has no effect when writing since both flattened and
structured tags may always be written.  Possible values are:
.Sp
.Vb 5
\&  undef \- Same as 0 for reading, 2 for copying
\&    0   \- Read/copy flattened tags
\&    1   \- Read/copy structured tags
\&    2   \- Read/copy both flattened and structured tags, but flag
\&          flattened tags as \*(Aqunsafe\*(Aq for copying
.Ve
.IP "SystemTags" 4
.IX Item "SystemTags"
Flag to extract the following additional File System tags:  FileAttributes,
FileDeviceNumber, FileInodeNumber, FileHardLinks, FileUserID, FileGroupID,
FileDeviceID, FileBlockSize and FileBlockCount.
.IP "TextOut" 4
.IX Item "TextOut"
Output file reference for Verbose and HtmlDump options.  Default is
\&\e*STDOUT.
.IP "Unknown" 4
.IX Item "Unknown"
Flag to get the values of unknown tags.  If set to 1, unknown tags are
extracted from \s-1EXIF \s0(or other tagged-format) directories.  If set to 2,
unknown tags are also extracted from binary data blocks.  Default is 0.
.IP "UserParam" 4
.IX Item "UserParam"
Special option to set/get user-defined parameters.  Useful to allow external
input into tag name expressions and ValueConv logic.  \fI\s-1PARAM\s0\fR is the
user-defined parameter name (case insensitive).
.Sp
.Vb 3
\&  PARAM         \- Get parameter
\&  PARAM=        \- Clear parameter
\&  PARAM=VALUE   \- Set parameter
.Ve
.Sp
User-defined parameters may be accessed in tag name expressions by prefixing
the parameter name with a dollar sign, just like normal tags.  If called
without a parameter name, \f(CW\*(C`Options(\*(AqUserParam\*(Aq)\*(C'\fR returns a reference to the
hash of all user parameters (with lower-case names).
.IP "Verbose" 4
.IX Item "Verbose"
Print verbose messages to file specified by TextOut option.  Value may be
from 0 to 5 for increasingly verbose messages.  Default is 0.  With the
verbose option set, messages are printed to the console as the file is
parsed.  Level 1 prints the tag names and raw values.  Level 2 adds more
details about the tags.  Level 3 adds a hex dump of the tag data, but with
limits on the number of bytes dumped.  Levels 4 and 5 remove the dump limit
on tag values and \s-1JPEG\s0 segment data respectively.
.IP "WriteMode" 4
.IX Item "WriteMode"
Set tag write/create mode.  Value is a string of one or more characters from
list below.  Default is 'wcg'.
.Sp
.Vb 3
\&    w \- Write existing tags
\&    c \- Create new tags
\&    g \- create new Groups as necessary
.Ve
.Sp
The level of the group differs for different types of metadata. For \s-1XMP\s0 or
\&\s-1IPTC\s0 this is the full \s-1XMP/IPTC\s0 block (the family 0 group), but for \s-1EXIF\s0 this
is the individual \s-1IFD \s0(the family 1 group).
.IP "XMPAutoConv" 4
.IX Item "XMPAutoConv"
Flag to enable automatic conversion for unknown \s-1XMP\s0 tags with values that
look like rational numbers or dates.  Default is 1.
.RE
.RS 4
.RE
.IP "Return Values:" 4
.IX Item "Return Values:"
The original value of the last specified parameter.
.SS "ClearOptions"
.IX Subsection "ClearOptions"
Reset all options to their default values.  Loads user-defined default
option values from the \f(CW%Image::ExifTool::UserDefined::Options\fR hash in the
\&.ExifTool_config file if it exists.
.PP
.Vb 1
\&    $exifTool\->ClearOptions();
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.IP "Return Values:" 4
.IX Item "Return Values:"
(none)
.SS "ExtractInfo"
.IX Subsection "ExtractInfo"
Extract all meta information from an image.
.PP
.Vb 1
\&    $success = $exifTool\->ExtractInfo(\*(Aqimage.jpg\*(Aq, \e%options);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
\&\*(L"ExtractInfo\*(R" takes exactly the same arguments as \*(L"ImageInfo\*(R".  The only
difference is that a list of tag keys is not returned if an \s-1ARRAY\s0 reference
is given.  The following options are effective in the call to
\&\*(L"ExtractInfo\*(R":
.Sp
Binary, Charset, CharsetEXIF, CharsetFileName, CharsetID3, CharsetIPTC,
CharsetPhotoshop, CharsetQuickTime, Composite, ExtendedXMP, ExtractEmbedded,
FastScan, FixBase, HtmlDump, HtmlDumpBase, IgnoreMinorErrors, Lang,
LargeFileSupport, MakerNotes, NoPDFList, PNGEarlyXMP, ScanForXMP, Struct,
TextOut, Unknown and Verbose.
.IP "Return Value:" 4
.IX Item "Return Value:"
1 if this was a recognized file format, 0 otherwise (and 'Error' tag set).
.SS "GetInfo"
.IX Subsection "GetInfo"
\&\*(L"GetInfo\*(R" is called to return meta information after it has been extracted
from the image by a previous call to \*(L"ExtractInfo\*(R" or \*(L"ImageInfo\*(R". This
function may be called repeatedly after a single call to \*(L"ExtractInfo\*(R" or
\&\*(L"ImageInfo\*(R".
.PP
.Vb 2
\&    # get image width and height only
\&    $info = $exifTool\->GetInfo(\*(AqImageWidth\*(Aq, \*(AqImageHeight\*(Aq);
\&
\&    # get all Error and Warning messages
\&    $info = $exifTool\->GetInfo(\*(AqError\*(Aq, \*(AqWarning\*(Aq);
\&
\&    # get information for all tags in list (list updated with tags found)
\&    $info = $exifTool\->GetInfo(\e@ioTagList);
\&
\&    # get all information in Author or Location groups
\&    $info = $exifTool\->GetInfo({Group2 => [\*(AqAuthor\*(Aq, \*(AqLocation\*(Aq]});
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
Inputs are the same as \*(L"ExtractInfo\*(R" and \*(L"ImageInfo\*(R" except that an
image can not be specified.  Options in effect are:
.Sp
Charset, CoordFormat, DateFormat, Duplicates, Escape, Exclude, Filter,
Group#, GlobalTimeShift, Lang, List, ListItem, ListSep, PrintConv, Sort (if
a tag list reference is given) and StrictDate.
.IP "Return Value:" 4
.IX Item "Return Value:"
Reference to information hash, the same as with \*(L"ImageInfo\*(R".
.SS "WriteInfo"
.IX Subsection "WriteInfo"
Write meta information to a file.  The specified source file is rewritten to
the same-type destination file with new information as specified by previous
calls to \*(L"SetNewValue\*(R".  The necessary segments and/or directories are
created in the destination file as required to store the specified
information.  May be called repeatedly to write the same information to
additional files without the need to call \*(L"SetNewValue\*(R" again.
.PP
.Vb 2
\&    # add information to a source file, writing output to new file
\&    $exifTool\->WriteInfo($srcfile, $dstfile);
\&
\&    # create XMP data file from scratch
\&    $exifTool\->WriteInfo(undef, $dstfile, \*(AqXMP\*(Aq);
\&
\&    # overwrite file (you do have backups, right?)
\&    $exifTool\->WriteInfo($srcfile);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Source file name, file reference, scalar reference, or undef to create a
file from scratch.  A reference to a
File::RandomAccess object is also allowed as a source,
but in this case the destination is not optional.
.Sp
2) [optional] Destination file name, file reference, scalar reference, or
undef to overwrite the original file.  May be '\-' to write to stdout.
.Sp
3) [optional] Destination file type.  Ignored if a source is defined.
.IP "Return Value:" 4
.IX Item "Return Value:"
1 if file was written \s-1OK, 2\s0 if file was written but no changes made, 0 on
file write error.
.Sp
If an error code is returned, an Error tag is set and GetValue('Error') can
be called to obtain the error description.  A Warning tag may be set even if
this routine is successful.  Calling WriteInfo clears any pre-existing Error
and Warning tags.
.Sp
.Vb 2
\&    $errorMessage = $exifTool\->GetValue(\*(AqError\*(Aq);
\&    $warningMessage = $exifTool\->GetValue(\*(AqWarning\*(Aq);
.Ve
.IP "Notes:" 4
.IX Item "Notes:"
The source file name may be undefined to create a file from scratch
(currently only \s-1XMP, MIE, ICC, VRD, DR4, EXV\s0 and \s-1EXIF\s0 files can be created
in this way \*(-- see \*(L"CanCreate\*(R" for details).  If undefined, the
destination file type is required unless the type can be determined from the
extension of the destination file name.
.Sp
If a destination file name is given, the specified file must not exist
because an existing destination file will not be overwritten.  Any new
values for FileName, Directory or HardLink are ignored when a destination
file name is specified.
.Sp
The destination file name may be undefined to overwrite the original file
(make sure you have backups!).  In this case, if a source file name is
provided, a temporary file is created and renamed to replace the source file
if no errors occurred while writing.  Otherwise, if a source file reference
or scalar reference is used, the image is first written to memory then
copied back to replace the original if there were no errors.
.Sp
On Mac \s-1OS\s0 systems, the file resource fork is preserved if this routine is
called with a source file name.
.PP
The following ExifTool options are effective in the call to \*(L"WriteInfo\*(R":
.PP
ByteOrder, Charset, CharsetEXIF, CharsetFileName, CharsetIPTC, Compact,
Compress, FixBase, IgnoreMinorErrors, PNGEarlyXMP and Verbose.
.SS "GetTagList"
.IX Subsection "GetTagList"
Get a sorted list of tags from the specified information hash or tag list.
.PP
.Vb 1
\&    @tags = $exifTool\->GetTagList($info, \*(AqGroup0\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) [optional] Information hash reference or tag list reference
.Sp
2) [optional] Sort order ('Input', 'File', 'Tag', 'Descr' or 'Group#')
.Sp
3) [optional] Secondary sort order ('File', 'Tag' or 'Descr')
.Sp
If the information hash or tag list reference is not provided, then the list
of found tags from the last call to \*(L"ImageInfo\*(R", \*(L"ExtractInfo\*(R" or
\&\*(L"GetInfo\*(R" is used instead, and the result is the same as if
\&\*(L"GetFoundTags\*(R" was called.  If sort order is not specified, the sort order
is taken from the current options settings.
.IP "Return Values:" 4
.IX Item "Return Values:"
A list of tag keys in the specified order.
.SS "GetFoundTags"
.IX Subsection "GetFoundTags"
Get list of found tags in specified sort order.  The found tags are the tags
for the information obtained from the most recent call to \*(L"ImageInfo\*(R",
\&\*(L"ExtractInfo\*(R" or \*(L"GetInfo\*(R" for this object.
.PP
.Vb 1
\&    @tags = $exifTool\->GetFoundTags(\*(AqFile\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) [optional] Sort order ('Input', 'File', 'Tag', 'Descr' or 'Group#')
.Sp
2) [optional] Secondary sort order ('File', 'Tag' or 'Descr')
.Sp
If sort order is not specified, the sort order from the ExifTool options is
used.
.IP "Return Values:" 4
.IX Item "Return Values:"
A list of tag keys in the specified order.
.SS "GetRequestedTags"
.IX Subsection "GetRequestedTags"
Get list of requested tags.  These are the tags that were specified in the
arguments of the most recent call to \*(L"ImageInfo\*(R", \*(L"ExtractInfo\*(R" or
\&\*(L"GetInfo\*(R", including tags specified via a tag list reference. Shortcut
tags are expanded in the list.
.PP
.Vb 1
\&    @tags = $exifTool\->GetRequestedTags();
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
(none)
.IP "Return Values:" 4
.IX Item "Return Values:"
List of requested tag keys in the same order that the tags were specified.
Note that this list will be empty if tags were not specifically requested
(ie. If extracting all tags).
.SS "GetValue"
.IX Subsection "GetValue"
Get the value of a specified tag.  The returned value is either the
human-readable (PrintConv) value, the converted machine-readable (ValueConv)
value, or the original raw (Raw) value.  If the value type is not specified,
the PrintConv value is returned if the PrintConv option is set, otherwise
the ValueConv value is returned.  The PrintConv values are same as the
values returned by \*(L"ImageInfo\*(R" and \*(L"GetInfo\*(R" in the tag/value hash
unless the PrintConv option is disabled.
.PP
Tags which represent lists of multiple values (as may happen with 'Keywords'
for example) are handled specially.  In scalar context, the returned
PrintConv value for these tags is either a string of values or a list
reference (depending on the List option setting), and the ValueConv value is
always a list reference.  But in list context, \*(L"GetValue\*(R" always returns
the list itself.
.PP
Note that \*(L"GetValue\*(R" requires a case-sensitive tag key as an argument.  To
retrieve tag information based on a case-insensitive tag name (with an
optional group specifier), use \*(L"GetInfo\*(R" instead.
.PP
.Vb 7
\&    # PrintConv example
\&    my $val = $exifTool\->GetValue($tag);
\&    if (ref $val eq \*(AqSCALAR\*(Aq) {
\&        print "$tag = (unprintable value)\en";
\&    } else {
\&        print "$tag = $val\en";
\&    }
\&
\&    # ValueConv examples
\&    my $val = $exifTool\->GetValue($tag, \*(AqValueConv\*(Aq);
\&    if (ref $val eq \*(AqARRAY\*(Aq) {
\&        print "$tag is a list of values\en";
\&    } elsif (ref $val eq \*(AqSCALAR\*(Aq) {
\&        print "$tag represents binary data\en";
\&    } else {
\&        print "$tag is a simple scalar\en";
\&    }
\&
\&    my @keywords = $exifTool\->GetValue(\*(AqKeywords\*(Aq, \*(AqValueConv\*(Aq);
.Ve
.PP
The following options are in effect when \*(L"GetValue\*(R" is called:
.PP
Charset, CoordFormat, DateFormat, Escape, Filter, GlobalTimeShift, Lang,
List, ListItem, ListSep, PrintConv and StrictDate.
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Tag key
.Sp
2) [optional] Value type: 'PrintConv', 'ValueConv', 'Both', 'Raw' or
\&'Rational'
.Sp
The default value type is 'PrintConv' if the PrintConv option is set,
otherwise the default is 'ValueConv'.  A value type of 'Both' returns both
ValueConv and PrintConv values as a list.  'Rational' returns the raw
rational value as a string fraction for rational types, or undef for other
types.
.IP "Return Values:" 4
.IX Item "Return Values:"
The value of the specified tag.  If the tag represents a list of multiple
values and the List option is disabled then PrintConv returns a string of
values, otherwise a reference to the list is returned in scalar context. 
The list itself is returned in list context.  (Unless 'Both' values are
requested, in which case two list references are returned, regardless of
context.)  Values may also be scalar references to binary data, or hash
references if the \*(L"Struct\*(R" option is set.
.Sp
Note: It is possible for \*(L"GetValue\*(R" to return an undefined ValueConv or
PrintConv value (or an empty list in list context) even if the tag exists,
since it is possible for these conversions to yield undefined values.  And
the Rational value will be undefined for any non-rational tag.  The Raw
value should always exist if the tag exists.
.SS "SetNewValue"
.IX Subsection "SetNewValue"
Set the new value for a tag.  The routine may be called multiple times to
set the values of many tags before using \*(L"WriteInfo\*(R" to write the new
values to an image.
.PP
For list-type tags (like Keywords), either call repeatedly with the same tag
name for each value, or call with a reference to the list of values.
.PP
.Vb 2
\&    # set a new value for a tag (errors go to STDERR)
\&    $success = $exifTool\->SetNewValue($tag, $value);
\&
\&    # set a new value and capture any error message
\&    ($success, $errStr) = $exifTool\->SetNewValue($tag, $value);
\&
\&    # delete information for specified tag if it exists in image
\&    # (also resets AddValue and DelValue options for this tag)
\&    $exifTool\->SetNewValue($tag);
\&
\&    # reset all values from previous calls to SetNewValue()
\&    $exifTool\->SetNewValue();
\&
\&    # delete a specific keyword
\&    $exifTool\->SetNewValue(\*(AqKeywords\*(Aq, $word, DelValue => 1);
\&
\&    # set keywords (a list\-type tag) with two new values
\&    $exifTool\->SetNewValue(Keywords => \*(Aqword1\*(Aq);
\&    $exifTool\->SetNewValue(Keywords => \*(Aqword2\*(Aq);
\&    # equivalent, but set both in one call using an array reference
\&    $exifTool\->SetNewValue(Keywords => [\*(Aqword1\*(Aq,\*(Aqword2\*(Aq]);
\&
\&    # add a keyword without replacing existing keywords in the file
\&    $exifTool\->SetNewValue(Keywords => $word, AddValue => 1);
\&
\&    # set a tag in a specific group
\&    $exifTool\->SetNewValue(Headline => $val, Group => \*(AqXMP\*(Aq);
\&    $exifTool\->SetNewValue(\*(AqXMP:Headline\*(Aq => $val);  # (equivalent)
\&
\&    # shift original date/time back by 2.5 hours
\&    $exifTool\->SetNewValue(DateTimeOriginal => \*(Aq2:30\*(Aq, Shift => \-1);
\&
\&    # write a tag only if it had a specific value
\&    # (the order of the following calls is not significant)
\&    $exifTool\->SetNewValue(Title => $oldVal, DelValue => 1);
\&    $exifTool\->SetNewValue(Title => $newVal);
\&
\&    # write tag by numerical value
\&    $exifTool\->SetNewValue(Orientation => 6, Type => \*(AqValueConv\*(Aq);
\&    $exifTool\->SetNewValue(\*(AqOrientation#\*(Aq => 6);  # (equivalent)
\&
\&    # delete all but EXIF tags
\&    $exifTool\->SetNewValue(\*(Aq*\*(Aq);  # delete all...
\&    $exifTool\->SetNewValue(\*(AqEXIF:*\*(Aq, undef, Replace => 2); # ...but EXIF
\&
\&    # write structured information as a HASH reference
\&    $exifTool\->SetNewValue(\*(AqXMP:Flash\*(Aq => {
\&        mode   => \*(Aqon\*(Aq,
\&        fired  => \*(Aqtrue\*(Aq,
\&        return => \*(Aqnot\*(Aq
\&    });
\&
\&    # write structured information as a serialized string
\&    $exifTool\->SetNewValue(\*(AqXMP:Flash\*(Aq=>\*(Aq{mode=on,fired=true,return=not}\*(Aq);
.Ve
.PP
(See <http://owl.phy.queensu.ca/~phil/exiftool/struct.html#Serialize> for
a description of the structure serialization technique.)
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) [optional] Tag key or tag name, or undef to clear all new values.  The
tag name may be prefixed by one or more family 0, 1 or 2 group names with
optional leading family numbers, separated by colons (eg. 'EXIF:Artist',
\&'XMP:Time:*'), which is equivalent to using a Group option argument.  Also,
a '#' may be appended to the tag name (eg. 'EXIF:Orientation#'), with the
same effect as setting Type to 'ValueConv'.  Wildcards ('*' and '?') may be
used in the tag name to assign multiple tags simultaneously.  A tag name of
\&'*' is special when deleting information, and will delete an entire group
even if some individual tags in the group are not writable, but only if a
single family 0 or 1 group is specified (otherwise the tags are deleted
individually).  Use \*(L"GetDeleteGroups\*(R" to get a list of deletable group
names, and see Image::ExifTool::TagNames for a
complete list of tag names.
.Sp
2) [optional] New value for tag.  Undefined to delete tag from file.  May be
a scalar, scalar reference, list reference to set a list of values, or hash
reference for a structure.  Integer values may be specified as a hexadecimal
string (with a leading '0x'), and simple rational values may be specified in
fractional form (eg. '4/10').  Structure tags may be specified either as a
hash reference or a serialized string (see the last two examples above).
.Sp
3\-N) [optional] SetNewValue option/value pairs (see below).
.IP "SetNewValue Options:" 4
.IX Item "SetNewValue Options:"
.RS 4
.PD 0
.IP "AddValue" 4
.IX Item "AddValue"
.PD
Specifies that the value be added to an existing list in a file rather than
overwriting.  Valid settings are 0 (overwrite any existing tag value), 1
(add to an existing list and warn for non-list tags) or 2 (add to existing
list and overwrite non-list tags).  Default is 0.
.IP "DelValue" 4
.IX Item "DelValue"
Delete existing tag from a file if it has the specified value.  Option
values are 0 or 1.  Default is 0.
.IP "EditGroup" 4
.IX Item "EditGroup"
Create tags in existing groups only.  Don't create new group.  Valid values
are 0 and 1.  Effectively removes the 'g' from the ExifTool WriteMode option
for this tag only.  Default is 0.
.IP "EditOnly" 4
.IX Item "EditOnly"
Edit tag only if it already exists.  Don't create new tag.  Valid values are
0 and 1.  Effectively removes the 'c' from the ExifTool WriteMode option for
this tag only.  Default is 0.
.IP "Group" 4
.IX Item "Group"
Specifies group name where tag should be written.  If not specified, tag is
written to highest priority group as specified by \*(L"SetNewGroups\*(R".  May be
one or more family 0, 1 or 2 groups with optional leading family number,
separated by colons.  Case is not significant.
.IP "NoFlat" 4
.IX Item "NoFlat"
Treat flattened tags as 'unsafe'.
.IP "NoShortcut" 4
.IX Item "NoShortcut"
Disables default behaviour of looking up tag in shortcuts if not found
otherwise.
.IP "Protected" 4
.IX Item "Protected"
Bit mask for tag protection levels to write.  Bit 0x01 allows writing of
\&'unsafe' tags (ie. tags not copied automatically via
\&\*(L"SetNewValuesFromFile\*(R").  Bit 0x02 allows writing of 'protected' tags, and
should only be used internally by ExifTool.  See
Image::ExifTool::TagNames, for a list of tag
names indicating 'unsafe' and 'protected' tags.  Default is 0.
.IP "ProtectSaved" 4
.IX Item "ProtectSaved"
Avoid setting new values which were saved after the Nth call to
\&\*(L"SaveNewValues\*(R".  Has no effect on unsaved values, or values saved before
Nth call.  Option value is N.  Default is undef.
.IP "Replace" 4
.IX Item "Replace"
Flag to replace the previous new values for this tag (ie. replace the values
set in previous calls to \*(L"SetNewValue\*(R").  This option is most commonly
used to replace previously-set new values for list-type tags.  Valid values
are 0 (set new value normally \*(-- adds to new values for list-type tags), 1
(reset previous new values for this tag and replace with the specified new
value) or 2 (reset previous new values only).
.IP "Shift" 4
.IX Item "Shift"
Shift the tag by the specified value.  Currently only date/time tags and
tags with numerical values may be shifted.  Undefined for no shift, 1 for a
positive shift, or \-1 for a negative shift.  A value of 0 causes a positive
shift to be applied if the tag is shiftable and AddValue is set, or a
negative shift for date/time tags only if DelValue is set. Default is undef.
See Image::ExifTool::Shift.pl for more
information.
.IP "Type" 4
.IX Item "Type"
The type of value being set.  Valid values are PrintConv, ValueConv or Raw.
Default is PrintConv if the \*(L"PrintConv\*(R" Option is set, otherwise
ValueConv.
.RE
.RS 4
.RE
.IP "Return Values:" 4
.IX Item "Return Values:"
In scalar context, returns the number of tags set and error messages are
printed to \s-1STDERR. \s0 In list context, returns the number of tags set, and the
error string (which is undefined if there was no error).
.IP "Notes:" 4
.IX Item "Notes:"
When deleting groups of tags, the Replace option may be used to exclude
specific groups from a mass delete.  However, this technique may not be used
to exclude individual tags from a group delete (unless a family 2 group was
specified in the delete).  Instead, use \*(L"SetNewValuesFromFile\*(R" to recover
the values of individual tags after deleting a group.
.Sp
When deleting all tags from a \s-1JPEG\s0 image, the \s-1APP14 \s0\*(L"Adobe\*(R" information is
not deleted by default because doing so may affect the appearance of the
image.  However, this information may be deleted by specifying it
explicitly, either by group (with 'Adobe:*') or as a block (with 'Adobe').
.PP
The following ExifTool options are effective in the call to \*(L"SetNewValue\*(R":
.PP
Charset, Escape, IgnoreMinorErrors, Lang, ListSep, ListSplit, PrintConv,
Verbose and WriteMode.
.SS "GetNewValue"
.IX Subsection "GetNewValue"
Get the new Raw value for a tag.  This is the value set by \*(L"SetNewValue\*(R"
this is queued to be written to file.  List-type tags may return multiple
values in list context.
.PP
.Vb 1
\&    $rawVal = $exifTool\->GetNewValue($tag);
\&
\&    @rawVals = $exifTool\->GetNewValue($tag);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Tag name (case sensitive, may be prefixed by family 0 or 1 group name)
.IP "Return Values:" 4
.IX Item "Return Values:"
List of new Raw tag values, or first value in list when called in scalar
context.  The list may be empty either if the tag isn't being written, or if
it is being deleted (ie. if \*(L"SetNewValue\*(R" was called without a value).
.SS "SetNewValuesFromFile"
.IX Subsection "SetNewValuesFromFile"
A very powerful routine that sets new values for tags from information found
in a specified file.
.PP
.Vb 4
\&    # set new values from all information in a file...
\&    my $info = $exifTool\->SetNewValuesFromFile($srcFile);
\&    # ...then write these values to another image
\&    my $result = $exifTool\->WriteInfo($file2, $outFile);
\&
\&    # set all new values, preserving original groups
\&    $exifTool\->SetNewValuesFromFile($srcFile, \*(Aq*:*\*(Aq);
\&
\&    # set specific information
\&    $exifTool\->SetNewValuesFromFile($srcFile, @tags);
\&
\&    # set new value from a different tag in specific group
\&    $exifTool\->SetNewValuesFromFile($fp, \*(AqIPTC:Keywords>XMP\-dc:Subject\*(Aq);
\&
\&    # add all IPTC keywords to XMP subject list
\&    $exifTool\->SetNewValuesFromFile($fp, \*(AqIPTC:Keywords+>XMP\-dc:Subject\*(Aq);
\&
\&    # set new value from an expression involving other tags
\&    $exifTool\->SetNewValuesFromFile($file,
\&        \*(AqComment<ISO=$ISO Aperture=$aperture Exposure=$shutterSpeed\*(Aq);
\&
\&    # set keywords list from the values of multiple tags
\&    $exifTool\->SetNewValuesFromFile($file, { Replace => 0 },
\&        \*(Aqkeywords<xmp:subject\*(Aq, \*(Aqkeywords<filename\*(Aq);
\&
\&    # copy all EXIF information, preserving the original IFD
\&    # (without \*(Aq>*.*\*(Aq tags would be copied to the preferred EXIF IFD)
\&    $exifTool\->SetNewValuesFromFile($file, \*(AqEXIF:*>*:*\*(Aq);
\&
\&    # copy all tags with names starting with "gps" (note: this is
\&    # different than "gps:*" because it will also copy XMP GPS tags)
\&    $exifTool\->SetNewValuesFromFile($file, \*(Aqgps*\*(Aq);
\&
\&    # set FileName from Model, translating questionable characters
\&    $exifTool\->SetNewValuesFromFile($file,
\&        \*(Aqfilename<${model; tr(/\e\e\e\e?*:|"><)(_) }.jpg\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) File name, file reference, or scalar reference
.Sp
2\-N) [optional] List of tag names to set or options hash references.  All
writable tags are set if none are specified.  The tag names are not case
sensitive, and may be prefixed by one or more family 0, 1 or 2 group names with
optional leading family numbers, separated by colons (eg. 'exif:iso').  A
leading '\-' indicates tags to be excluded (eg. '\-comment'), or a trailing '#'
causes the ValueConv value to be copied (same as setting the Type option to
\&'ValueConv' for this tag only).  Wildcards ('*' and '?') may be used in the tag
name.  A tag name of '*' is commonly used when a group is specified to copy all
tags in the group (eg. 'XMP:*').  A special feature allows tag names of the form
\&'DSTTAG<\s-1SRCTAG\s0' (or '\s-1SRCTAG\s0>\s-1DSTTAG\s0') to be specified to copy information
to a tag with a different name or a specified group.  Both '\s-1SRCTAG\s0' and '\s-1DSTTAG\s0'
may contain wildcards and/or be prefixed by a group name (eg.
\&'fileModifyDate<modifyDate' or 'xmp:*<*'), and/or suffixed by a '#' to
disable print conversion.  Copied tags may also be added or deleted from a list
with arguments of the form 'DSTTAG+<\s-1SRCTAG\s0' or 'DSTTAG\-<\s-1SRCTAG\s0'.  Tags
are evaluated in order, so exclusions apply only to tags included earlier in the
list.  An extension of this feature allows the tag value to be set from an
expression containing tag names with leading '$' symbols (eg. 'Comment<the
file is \f(CW$filename\fR').  Braces '{}' may be used around the tag name to separate it
from subsequent text, and a '$$' is used to to represent a '$' symbol.  The
behaviour for missing tags in expressions is defined by the \*(L"MissingTagValue\*(R"
option.  The tag value may be modified via changes to the default input variable
($_) in Perl expressions placed inside the braces and after a semicolon
following the tag name.  Braces within the expression must be balanced. 
Multiple options hash references may be passed to set different options for
different tags.  Options apply to subsequent tags in the argument list.
.Sp
By default, this routine will commute information between same-named tags in
different groups, allowing information to be translated between images with
different formats.  This behaviour may be modified by specifying a group
name for extracted tags (even if '*' is used as a group name), in which case
the information is written to the original group, unless redirected to a
different group.  When '*' is used for a group name, by default the family 1
group of the original tag is preserved, but a different family may be specified
with a leading family number.  (For example, specifying '*:*' copies all
information while preserving the original family 1 groups, while '0*:*'
preserves the family 0 group.)
.IP "SetNewValuesFromFile Options:" 4
.IX Item "SetNewValuesFromFile Options:"
The options are the same was for \*(L"SetNewValue\*(R", and are passed directly
to \*(L"SetNewValue\*(R" internally, with a few exceptions:
.Sp
\&\- The Replace option defaults to 1 instead of 0 as with \*(L"SetNewValue\*(R".
.Sp
\&\- The AddValue or DelValue option is set for individual tags if '+>' or '\->'
(or '+<' or '\-<') are used.
.Sp
\&\- The Group option is set for tags where a group name is given.
.Sp
\&\- The Protected flag is set to 1 for individually specified tags.
.Sp
\&\- The Type option also applies to extracted tags.
.IP "Return Values:" 4
.IX Item "Return Values:"
A hash of information that was set successfully.  May include Warning or
Error entries if there were problems reading the input file.
.IP "Notes:" 4
.IX Item "Notes:"
The PrintConv option applies to this routine, but it normally should be left
on to provide more reliable transfer of information between groups.
.Sp
If a preview image exists, it is not copied.  The preview image must be
transferred separately if desired, in a separate call to \*(L"WriteInfo\*(R"
.Sp
When simply copying all information between files of the same type, it is
usually desirable to preserve the original groups by specifying '*:*' for
the tags to set.
.Sp
The \*(L"Duplicates\*(R" option is always in effect for tags extracted from the
source file using this routine.
.Sp
The \*(L"Struct\*(R" option is enabled by default for tags extracted by this
routine.  This allows the hierarchy of complex structures to be preserved
when copying, but the Struct option may be set to 0 to override this
behaviour and copy as flattened tags instead.
.SS "CountNewValues"
.IX Subsection "CountNewValues"
Return the total number of new values set.
.PP
.Vb 2
\&    $numSet = $exifTool\->CountNewValues();
\&    ($numSet, $numPseudo) = $exifTool\->CountNewValues();
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.IP "Return Values:" 4
.IX Item "Return Values:"
In scalar context, returns the total number of tags with new values set.  In
list context, also returns the number of \*(L"pseudo\*(R" tag values which have been
set.  \*(L"Pseudo\*(R" tags are tags like FileName and FileModifyDate which are not
contained within the file and can be changed without rewriting the file.
.SS "SaveNewValues"
.IX Subsection "SaveNewValues"
Save state of new values to be later restored by \*(L"RestoreNewValues\*(R".
.PP
.Vb 5
\&    $exifTool\->SaveNewValues();         # save state of new values
\&    $exifTool\->SetNewValue(ISO => 100); # set new value for ISO
\&    $exifTool\->WriteInfo($src, $dst1);  # write ISO + previous new values
\&    $exifTool\->RestoreNewValues();      # restore previous new values
\&    $exifTool\->WriteInfo($src, $dst2);  # write previous new values only
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.IP "Return Value:" 4
.IX Item "Return Value:"
Count of the number of times this routine has been called (N) since the last
time the new values were reset.
.SS "RestoreNewValues"
.IX Subsection "RestoreNewValues"
Restore new values to the settings that existed when \*(L"SaveNewValues\*(R" was
last called.  May be called repeatedly after a single call to
\&\*(L"SaveNewValues\*(R".  See \*(L"SaveNewValues\*(R" above for an example.
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.IP "Return Value:" 4
.IX Item "Return Value:"
None.
.SS "SetFileModifyDate"
.IX Subsection "SetFileModifyDate"
Write the filesystem modification or creation time from the new value of the
FileModifyDate or FileCreateDate tag.
.PP
.Vb 3
\&    $exifTool\->SetNewValue(FileModifyDate => \*(Aq2000:01:02 03:04:05\-05:00\*(Aq,
\&                           Protected => 1);
\&    $result = $exifTool\->SetFileModifyDate($file);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) File name
.Sp
2) [optional] Base time if applying shift (days before $^T)
.Sp
3) [optional] Tag to write: 'FileModifyDate' (default), or 'FileCreateDate'
.IP "Return Value:" 4
.IX Item "Return Value:"
1 if the time was changed, 0 if nothing was done, or \-1 if there was an
error setting the time.
.IP "Notes:" 4
.IX Item "Notes:"
Equivalent to, but more efficient than calling \*(L"WriteInfo\*(R" when only the
FileModifyDate or FileCreateDate tag has been set.  If a timezone is not
specified, local time is assumed.  When shifting, the time of the original
file is used unless the optional base time is specified.
.Sp
The ability to write FileCreateDate is currently restricted to Windows
systems only.
.SS "SetFileName"
.IX Subsection "SetFileName"
Set the file name and directory, or create a hard link.  If not specified,
the new file name is derived from the new values of the FileName and
Directory tags, or from the HardLink tag if creating a link.  If the
FileName tag contains a '/', then the file is renamed into a new directory.
If FileName ends with '/', then it is taken as a directory name and the file
is moved into the new directory.  The new value for the Directory tag takes
precedence over any directory specified in FileName.
.PP
.Vb 2
\&    $result = $exifTool\->SetFileName($file);
\&    $result = $exifTool\->SetFileName($file, $newName);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Current file name
.Sp
2) [optional] New file name
.Sp
3) [optional] 'Link' to create a hard link instead of renaming the file, or
\&'Test' to test renaming feature by printing the old and new names instead of
changing anything.
.IP "Return Value:" 4
.IX Item "Return Value:"
1 if the file name or directory was changed, 0 if nothing was done, or \-1 if
there was an error renaming the file.
.IP "Notes:" 4
.IX Item "Notes:"
Will not overwrite existing files. New directories are created as necessary.
.SS "SetNewGroups"
.IX Subsection "SetNewGroups"
Set the order of the preferred groups when adding new information.  In
subsequent calls to \*(L"SetNewValue\*(R", new information will be created in the
first valid group of this list.  This has an impact only if the group is not
specified when calling \*(L"SetNewValue\*(R" and if the tag name exists in more
than one group.  The default order is \s-1EXIF, IPTC\s0 then \s-1XMP. \s0 Any family 0
group name may be used.  Case is not significant.
.PP
.Vb 1
\&    $exifTool\->SetNewGroups(\*(AqXMP\*(Aq,\*(AqEXIF\*(Aq,\*(AqIPTC\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1\-N) Groups in order of priority.  If no groups are specified, the priorities
are reset to the defaults.
.IP "Return Value:" 4
.IX Item "Return Value:"
None.
.SS "GetNewGroups"
.IX Subsection "GetNewGroups"
Get current group priority list.
.PP
.Vb 1
\&    @groups = $exifTool\->GetNewGroups();
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.IP "Return Values:" 4
.IX Item "Return Values:"
List of group names in order of write priority.  Highest priority first.
.SS "GetTagID"
.IX Subsection "GetTagID"
Get the \s-1ID\s0 for the specified tag.  The \s-1ID\s0 is the \s-1IFD\s0 tag number in \s-1EXIF\s0
information, the property name in \s-1XMP\s0 information, or the data offset in a
binary data block.  For some tags, such as Composite tags where there is no
\&\s-1ID,\s0 an empty string is returned.  In list context, also returns a language
code for the tag if available and different from the default language (eg.
with alternate language entries for \s-1XMP \s0\*(L"lang-alt\*(R" tags).
.PP
.Vb 2
\&    $id = $exifTool\->GetTagID($tag);
\&    ($id, $lang) = $exifTool\->GetTagID($tag);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Tag key
.IP "Return Values:" 4
.IX Item "Return Values:"
In scalar context, returns the tag \s-1ID\s0 or '' if there is no \s-1ID\s0 for this tag.
In list context, returns the tag \s-1ID \s0(or '') and the language code (or
undef).
.SS "GetDescription"
.IX Subsection "GetDescription"
Get description for specified tag.  This function will always return a
defined value.  In the case where the description doesn't exist, one is
generated from the tag name.
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Tag key
.IP "Return Values:" 4
.IX Item "Return Values:"
A description for the specified tag.
.SS "GetGroup"
.IX Subsection "GetGroup"
Get group name(s) for a specified tag.
.PP
.Vb 2
\&    # return family 0 group name (eg. \*(AqEXIF\*(Aq);
\&    $group = $exifTool\->GetGroup($tag, 0);
\&
\&    # return all groups (eg. qw{EXIF IFD0 Author Main})
\&    @groups = $exifTool\->GetGroup($tag);
\&
\&    # return groups as a string (eg. \*(AqMain:IFD0:Author\*(Aq)
\&    $group = $exifTool\->GetGroup($tag, \*(Aq:3:1:2\*(Aq);
\&
\&    # return groups as a simplified string (eg. \*(AqIFD0:Author\*(Aq)
\&    $group = $exifTool\->GetGroup($tag, \*(Aq3:1:2\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) Tag key
.Sp
2) [optional] Group family number, or string of numbers separated by colons
.IP "Return Values:" 4
.IX Item "Return Values:"
Group name (or '' if tag has no group).  If no group family is specified,
\&\*(L"GetGroup\*(R" returns the name of the group in family 0 when called in scalar
context, or the names of groups for all families in list context.  Returns a
string of group names separated by colons if the input group family contains
a colon.  The string is simplified to remove a leading 'Main:' and adjacent
identical group names unless the family string begins with a colon.
.IP "Notes:" 4
.IX Item "Notes:"
The group family numbers are currently available:
.Sp
.Vb 5
\&    0) Information Type         (eg. EXIF, XMP, IPTC)
\&    1) Specific Location        (eg. IFD0, XMP\-dc)
\&    2) Category                 (eg. Author, Time)
\&    3) Document Number          (eg. Main, Doc1, Doc3\-2)
\&    4) Instance Number          (eg. Copy1, Copy2, Copy3...)
.Ve
.Sp
Families 0 and 1 are based on the file structure, and are similar except
that family 1 is more specific and sub-divides some groups to give more
detail about the specific location where the information was found.  For
example, the \s-1EXIF\s0 group is split up based on the specific \s-1IFD \s0(Image File
Directory), the MakerNotes group is divided into groups for each
manufacturer, and the \s-1XMP\s0 group is separated based on the \s-1XMP\s0 namespace
prefix.  Note that only common \s-1XMP\s0 namespaces are listed in the
GetAllGroups documentation, but additional
namespaces may be present in some \s-1XMP\s0 data.  Also note that the 'XMP\-xmp...'
group names may appear in the older form 'XMP\-xap...' since these names
evolved as the \s-1XMP\s0 standard was developed.  The ICC_Profile group is broken
down to give information about the specific ICC_Profile tag from which
multiple values were extracted.  As well, information extracted from the
ICC_Profile header is separated into the ICC-header group.
.Sp
Family 2 classifies information based on the logical category to which the
information refers.
.Sp
Family 3 gives the document number for tags extracted from embedded
documents, or 'Main' for tags from the main document.  (See the
\&\*(L"ExtractEmbedded\*(R" option for extracting tags from embedded documents.) 
Nested sub-documents (if they exist) are indicated by numbers separated with
dashes in the group name, to an arbitrary depth. (eg. 'Doc2\-3\-1' is the 1st
sub-sub-document of the 3rd sub-document of the 2nd embedded document of the
main file.)
.Sp
Family 4 provides a method for differentiating tags when multiple tags exist
with the same name in the same location.  The primary instance of a tag (the
tag extracted when the Duplicates option is disabled and no group is
specified) has no family 4 group name, but additional instances have have
family 4 group names of 'Copy1', 'Copy2', 'Copy3', etc.
.Sp
See \*(L"GetAllGroups [static]\*(R" for complete lists of group names.
.SS "GetGroups"
.IX Subsection "GetGroups"
Get list of group names that exist in the specified information.
.PP
.Vb 2
\&    @groups = $exifTool\->GetGroups($info, 2);
\&    @groups = $exifTool\->GetGroups(\*(Aq3:1\*(Aq);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.Sp
1) [optional] Info hash ref (default is all extracted info)
.Sp
2) [optional] Group family number, or string of numbers (default 0)
.IP "Return Values:" 4
.IX Item "Return Values:"
List of group names in alphabetical order. If information hash is not
specified, the group names are returned for all extracted information. See
\&\*(L"GetGroup\*(R" for an description of family numbers and family number strings.
.SS "BuildCompositeTags"
.IX Subsection "BuildCompositeTags"
Builds composite tags from required tags.  The composite tags are
convenience tags which are derived from the values of other tags.  This
routine is called automatically by \*(L"ImageInfo\*(R" and \*(L"ExtractInfo\*(R" if the
Composite option is set.
.IP "Inputs:" 4
.IX Item "Inputs:"
0) ExifTool object reference
.IP "Return Values:" 4
.IX Item "Return Values:"
(none)
.IP "Notes:" 4
.IX Item "Notes:"
Tag values are calculated in alphabetical order unless a tag Require's or
Desire's another composite tag, in which case the calculation is deferred
until after the other tag is calculated.
.Sp
Composite tags may need to read data from the image for their value to be
determined, and for these \*(L"BuildCompositeTags\*(R" must be called while the
image is available.  This is only a problem if \*(L"ImageInfo\*(R" is called with
a filename (as opposed to a file reference or scalar reference) since in
this case the file is closed before \*(L"ImageInfo\*(R" returns.  Here the
Composite option may be used so that \*(L"BuildCompositeTags\*(R" is called from
within \*(L"ImageInfo\*(R", before the file is closed.
.SS "GetTagName [static]"
.IX Subsection "GetTagName [static]"
Get name of tag from tag key.  This is a convenience function that
strips the embedded instance number, if it exists, from the tag key.
.PP
Note: \*(L"static\*(R" in the heading above indicates that the function does not
require an ExifTool object reference as the first argument.  All functions
documented below are also static.
.PP
.Vb 1
\&    $tagName = Image::ExifTool::GetTagName($tag);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) Tag key
.IP "Return Value:" 4
.IX Item "Return Value:"
Tag name.  This is the same as the tag key but has the instance number
removed.
.SS "GetShortcuts [static]"
.IX Subsection "GetShortcuts [static]"
Get a list of shortcut tags.
.IP "Inputs:" 4
.IX Item "Inputs:"
(none)
.IP "Return Values:" 4
.IX Item "Return Values:"
List of shortcut tags (as defined in Image::ExifTool::Shortcuts).
.SS "GetAllTags [static]"
.IX Subsection "GetAllTags [static]"
Get list of all available tag names.
.PP
.Vb 1
\&    @tagList = Image::ExifTool::GetAllTags($group);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) [optional] Group name, or string of group names separated by colons
.IP "Return Values:" 4
.IX Item "Return Values:"
A list of all available tags in alphabetical order, or all tags in a
specified group or intersection of groups.  The group name is case
insensitive, and any group in families 0\-2 may be used except for \s-1EXIF\s0
family 1 groups (ie. the specific \s-1IFD\s0).
.SS "GetWritableTags [static]"
.IX Subsection "GetWritableTags [static]"
Get list of all writable tag names.
.PP
.Vb 1
\&    @tagList = Image::ExifTool::GetWritableTags($group);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) [optional] Group name, or string of group names separated by colons
.IP "Return Values:" 4
.IX Item "Return Values:"
A list of all writable tags in alphabetical order.  These are the tags for
which values may be set through \*(L"SetNewValue\*(R".  If a group name is given,
returns only writable tags in specified group(s).  The group name is case
insensitive, and any group in families 0\-2 may be used except for \s-1EXIF\s0
family 1 groups (ie. the specific \s-1IFD\s0).
.SS "GetAllGroups [static]"
.IX Subsection "GetAllGroups [static]"
Get list of all group names in specified family.
.PP
.Vb 1
\&    @groupList = Image::ExifTool::GetAllGroups($family);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) Group family number (0\-4)
.IP "Return Values:" 4
.IX Item "Return Values:"
A list of all groups in the specified family in alphabetical order.
.PP
Here is a complete list of groups for each of these families:
.IP "Family 0 (Information Type):" 4
.IX Item "Family 0 (Information Type):"
\&\s-1AFCP, AIFF, APE, APP0, APP1, APP11, APP12, APP13, APP14, APP15, APP4, APP5,
APP6, APP8, ASF,\s0 Audible, CanonVRD, Composite, \s-1DICOM, DNG, DV,\s0 DjVu, Ducky,
\&\s-1EXE, EXIF,\s0 ExifTool, \s-1FLAC, FLIR,\s0 File, Flash, FlashPix, Font, FotoStation,
\&\s-1GIF, GIMP,\s0 GeoTiff, H264, \s-1HTML,\s0 ICC_Profile, \s-1ID3, IPTC, ISO, ITC, JFIF,
JPEG,\s0 Jpeg2000, \s-1LNK,\s0 Leaf, Lytro, M2TS, \s-1MIE, MIFF, MNG, MOI, MPC, MPEG, MPF,
MXF,\s0 MakerNotes, Matroska, Meta, Ogg, OpenEXR, \s-1PDF, PICT, PLIST, PNG, PSP,\s0
Palm, PanasonicRaw, PhotoCD, PhotoMechanic, Photoshop, PostScript, PrintIM,
QuickTime, \s-1RAF, RIFF, RSRC, RTF,\s0 Radiance, Rawzor, Real, \s-1SVG,\s0 SigmaRaw,
Stim, Theora, Torrent, VCard, Vorbis, \s-1XML, XMP, ZIP\s0
.IP "Family 1 (Specific Location):" 4
.IX Item "Family 1 (Specific Location):"
\&\s-1AC3, AFCP, AIFF, APE, ASF, AVI1,\s0 Adobe, AdobeCM, AdobeDNG, Apple, Audible,
\&\s-1CIFF,\s0 Canon, CanonCustom, CanonRaw, CanonVRD, Casio, Chapter#, Composite,
\&\s-1DICOM, DNG, DV,\s0 DjVu, DjVu-Meta, Ducky, \s-1EPPIM, EXE, EXIF,\s0 ExifIFD, ExifTool,
\&\s-1FLAC, FLIR,\s0 File, Flash, FlashPix, Font, FotoStation, FujiFilm, FujiIFD, \s-1GE,
GIF, GIMP, GPS,\s0 GeoTiff, GlobParamIFD, GraphConv, H264, \s-1HP, HTC, HTML,\s0
HTML-dc, HTML-ncc, HTML-office, HTML-prod, HTML\-vw96, HTTP-equiv, ICC-chrm,
ICC-clrt, ICC-header, ICC-meas, ICC-meta, ICC-view, ICC_Profile,
ICC_Profile#, \s-1ID3,\s0 ID3v1, ID3v1_Enh, ID3v2_2, ID3v2_3, ID3v2_4, \s-1IFD0, IFD1,
IPTC,\s0 IPTC#, \s-1ISO, ITC,\s0 InteropIFD, \s-1JFIF, JPEG,\s0 JPEG-HDR, \s-1JVC,\s0 Jpeg2000,
\&\s-1KDC_IFD,\s0 Kodak, KodakBordersIFD, KodakEffectsIFD, KodakIFD, KyoceraRaw, \s-1LNK,\s0
Leaf, LeafSubIFD, Leica, Lytro, M2TS, \s-1MAC,\s0 MIE-Audio, MIE-Camera, MIE-Canon,
MIE-Doc, MIE-Extender, MIE-Flash, MIE-GPS, MIE-Geo, MIE-Image, MIE-Lens,
MIE-Main, MIE-MakerNotes, MIE-Meta, MIE-Orient, MIE-Preview, MIE-Thumbnail,
MIE-UTM, MIE-Unknown, MIE-Video, \s-1MIFF, MNG, MOBI, MOI, MPC, MPEG, MPF0,\s0
MPImage, \s-1MXF,\s0 MakerNotes, MakerUnknown, Matroska, MediaJukebox, MetaIFD,
Microsoft, Minolta, MinoltaRaw, Motorola, \s-1NITF,\s0 Nikon, NikonCapture,
NikonCustom, NikonScan, Nintendo, Ocad, Ogg, Olympus, OpenEXR, \s-1PDF, PICT,
PNG,\s0 PNG-pHYs, \s-1PSP,\s0 Palm, Panasonic, PanasonicRaw, Pentax, PhaseOne,
PhotoCD, PhotoMechanic, Photoshop, PictureInfo, PostScript, PreviewIFD,
PrintIM, ProfileIFD, Qualcomm, QuickTime, \s-1RAF, RAF2, RIFF, RMETA, RSRC, RTF,\s0
Radiance, Rawzor, Real, Real-CONT, Real-MDPR, Real-PROP, Real\-RA3, Real\-RA4,
Real\-RA5, Real-RJMD, Reconyx, Ricoh, \s-1SPIFF, SR2,\s0 SR2DataIFD, SR2SubIFD,
SRF#, \s-1SVG,\s0 Samsung, Sanyo, Scalado, Sigma, SigmaRaw, Sony, SonyIDC, Stim,
SubIFD, System, Theora, Torrent, Track#, VCard, VCalendar, Version0, Vorbis,
\&\s-1XML, XMP,\s0 XMP-DICOM, XMP-GPano, XMP-MP, \s-1XMP\-MP1,\s0 XMP-PixelLive, XMP-aas,
XMP-acdsee, XMP-album, XMP-apple-fi, XMP-aux, XMP-cc, XMP-cell, XMP-crs,
XMP-dc, XMP-dex, XMP-digiKam, XMP-dwc, XMP-exif, XMP-exifEX,
XMP-expressionmedia, XMP-extensis, XMP-fpv, XMP-getty, XMP-ics,
XMP-iptcCore, XMP-iptcExt, XMP-lr, XMP-mediapro, XMP-microsoft,
XMP-mwg-coll, XMP-mwg-kw, XMP-mwg-rs, XMP-pdf, XMP-pdfx, XMP-photomech,
XMP-photoshop, XMP-plus, XMP-prism, XMP-prl, XMP-pur, XMP-rdf, XMP-swf,
XMP-tiff, XMP-x, XMP-xmp, XMP-xmpBJ, XMP-xmpDM, XMP-xmpMM, XMP-xmpNote,
XMP-xmpPLUS, XMP-xmpRights, XMP-xmpTPg, \s-1ZIP\s0
.IP "Family 2 (Category):" 4
.IX Item "Family 2 (Category):"
Audio, Author, Camera, Document, ExifTool, Image, Location, Other, Preview,
Printing, Time, Unknown, Video
.IP "Family 3 (Document Number):" 4
.IX Item "Family 3 (Document Number):"
Doc#, Main
.IP "Family 4 (Instance Number):" 4
.IX Item "Family 4 (Instance Number):"
Copy#
.SS "GetDeleteGroups [static]"
.IX Subsection "GetDeleteGroups [static]"
Get list of all deletable group names.
.PP
.Vb 1
\&    @delGroups = Image::ExifTool::GetDeleteGroups();
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
None.
.IP "Return Values:" 4
.IX Item "Return Values:"
A list of deletable group names in alphabetical order.  The current list of
deletable group names is:
.Sp
\&\s-1AFCP, APP0, APP1, APP10, APP11, APP12, APP13, APP14, APP15, APP2, APP3,
APP4, APP5, APP6, APP7, APP8, APP9,\s0 Adobe, \s-1CIFF,\s0 CanonVRD, Ducky, \s-1EXIF,\s0
ExifIFD, File, FlashPix, FotoStation, \s-1GPS,\s0 GlobParamIFD, ICC_Profile, \s-1IFD0,
IFD1, IPTC,\s0 InteropIFD, \s-1JFIF,\s0 Jpeg2000, \s-1MIE, MPF,\s0 MakerNotes, Meta, MetaIFD,
NikonCapture, \s-1PDF,\s0 PDF-update, \s-1PNG,\s0 PhotoMechanic, Photoshop, PrintIM,
\&\s-1RMETA, RSRC,\s0 SubIFD, Trailer, \s-1XML,\s0 XML\-*, \s-1XMP,\s0 XMP\-*
.Sp
All names in this list are either family 0 or family 1 group names, with the
exception of 'Trailer' which allows all trailers in \s-1JPEG\s0 and TIFF-format
images to be deleted at once, including unknown trailers.  To schedule a
group for deletion, call \*(L"SetNewValue\*(R" with an undefined value and a tag
name like 'Trailer:*'.
.Sp
Note that the \s-1JPEG \*(L"APP\*(R"\s0 groups are special, and are used only to delete
application segments which are not associated with another deletable group. 
For example, deleting 'APP14:*' will delete other \s-1APP14\s0 segments, but not
the \s-1APP14 \s0\*(L"Adobe\*(R" segment.
.SS "GetFileType [static]"
.IX Subsection "GetFileType [static]"
Get type of file given file name.
.PP
.Vb 2
\&    my $type = Image::ExifTool::GetFileType($filename);
\&    my $desc = Image::ExifTool::GetFileType($filename, 1);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) [optional] File name (or just an extension)
.Sp
1) [optional] Flag to return a description instead of a type.  Set to 0 to
return type for recognized but unsupported files (otherwise the return value
for unsupported files is undef).
.IP "Return Value:" 4
.IX Item "Return Value:"
A string, based on the file extension, which indicates the basic format of
the file.  Note that some files may be based on other formats (like many \s-1RAW\s0
image formats are based on \s-1TIFF\s0).  In array context, may return more than
one file type if the file may be based on different formats.  Returns undef
if files with this extension are not yet supported by ExifTool.  Returns a
list of extensions for all supported file types if no input extension is
specified (or all recognized file types if the description flag is set to 0). 
Returns a more detailed description of the specific file format when the
description flag is set.
.SS "CanWrite [static]"
.IX Subsection "CanWrite [static]"
Can the specified file be written?
.PP
.Vb 1
\&    my $writable = Image::ExifTool::CanWrite($filename);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) File name or extension
.IP "Return Value:" 4
.IX Item "Return Value:"
True if ExifTool supports writing files of this type (based on the file
extension).
.SS "CanCreate [static]"
.IX Subsection "CanCreate [static]"
Can the specified file be created?
.PP
.Vb 1
\&    my $creatable = Image::ExifTool::CanCreate($filename);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) File name or extension
.IP "Return Value:" 4
.IX Item "Return Value:"
True if ExifTool can create files with this extension from scratch.
Currently, this can only be done with \s-1XMP, MIE, ICC, VRD, DR4, EXV\s0 and \s-1EXIF\s0
files.
.SS "AddUserDefinedTags [static]"
.IX Subsection "AddUserDefinedTags [static]"
Add user-defined tags to an existing tag table at run time.  This differs
from the usual technique of creating user-defined tags via the
\&\f(CW%Image::ExifTool::UserDefined\fR hash (see the ExifTool_config file in the
Image::ExifTool distribution) because it allows tags to be added after the
tag table has been initialized.
.PP
.Vb 6
\&    use Image::ExifTool \*(Aq:Public\*(Aq;
\&    my %tags = (
\&        TestTagID1 => { Name => \*(AqTestTagName1\*(Aq },
\&        TestTagID2 => { Name => \*(AqTestTagName2\*(Aq },
\&    );
\&    my $num = AddUserDefinedTags(\*(AqImage::ExifTool::PDF::Info\*(Aq, %tags);
.Ve
.IP "Inputs:" 4
.IX Item "Inputs:"
0) Destination tag table name
.Sp
1\-N) Pairs of tag \s-1ID /\s0 tag information hash references for the new tags
.IP "Return Value:" 4
.IX Item "Return Value:"
The number of tags added.
.IP "Notes" 4
.IX Item "Notes"
Pre-existing tags with the same \s-1ID\s0 will be replaced in the destination
table. See lib/Image/ExifTool/README in the full distribution for full
details on the elements of the tag information hash.
.SH "CHARACTER ENCODINGS"
.IX Header "CHARACTER ENCODINGS"
Certain meta information formats allow coded character sets other than plain
\&\s-1ASCII. \s0 When reading, most known encodings are converted to the external
character set according to the \*(L"Charset\*(R" option, or to \s-1UTF\-8\s0 by default.
When writing, the inverse conversions are performed.  Alternatively, special
characters may be converted to/from \s-1HTML\s0 character entities with the
\&\*(L"Escape\*(R" \s-1HTML\s0 option.
.PP
A distinction is made between the external character set visible via the
ExifTool \s-1API,\s0 and the internal character used to store text in the metadata
of a file.  These character sets may be specified separately as follows:
.IP "External Character Sets:" 4
.IX Item "External Character Sets:"
The encoding for tag values passed to/from ExifTool \s-1API\s0 functions is set via
the \*(L"Charset\*(R" option, which is '\s-1UTF8\s0' by default.
.Sp
The encoding of file names is specified via the \*(L"CharsetFileName\*(R" option.
By default, \*(L"CharsetFileName\*(R" is not defined, and file names passed to
ExifTool are used directly in calls to the system i/o routines (which expect
\&\s-1UTF\-8\s0 strings on Mac/Linux, but default to the system code page on Windows).
Setting \*(L"CharsetFileName\*(R" causes file names to be converted from the
specified encoding to one appropriate for the system.  In Windows this also
has the effect of activating Unicode filename support via the special
Windows wide-character i/o routines if Win32API::File is available.
.IP "Internal Character Sets:" 4
.IX Item "Internal Character Sets:"
The encodings used to store strings in the various metadata formats.  These
encodings may be changed for certain types of metadata via the
\&\*(L"CharsetEXIF\*(R", \*(L"CharsetID3\*(R", \*(L"CharsetIPTC\*(R", \*(L"CharsetPhotoshop\*(R" and
\&\*(L"CharsetQuickTime\*(R" options.
.PP
Values are returned as byte strings of encoded characters.  Perl wide
characters are not used.  By default, most returned strings are encoded in
\&\s-1UTF\-8. \s0 For these, \fIEncode::decode_utf8()\fR may be used to convert to a
sequence of logical Perl characters.  Note that some settings of the
\&\s-1PERL_UNICODE\s0 environment variable may be incompatible with ExifTool's
character handling.
.PP
More specific details are given below about how character coding is handled
for \s-1EXIF, IPTC, XMP, PNG, ID3, PDF,\s0 Photoshop, QuickTime, \s-1AIFF, MIE\s0 and
Vorbis information:
.SS "\s-1EXIF\s0"
.IX Subsection "EXIF"
Most textual information in \s-1EXIF\s0 is stored in \s-1ASCII\s0 format (called \*(L"string\*(R"
in the ExifTool tag name documentation). By
default ExifTool does not convert these strings.  However, it is not
uncommon for applications to write \s-1UTF\-8\s0 or other encodings where \s-1ASCII\s0 is
expected.  To deal with these, ExifTool allows the internal \s-1EXIF\s0 string
encoding to be specified with \*(L"CharsetEXIF\*(R", which causes \s-1EXIF\s0 string
values to be converted from the specified character set when reading, and
stored with this character set when writing.  (The \s-1MWG\s0 recommends using
\&\s-1UTF\-8\s0 encoding for \s-1EXIF\s0 strings, and in keeping with this the
\&\s-1MWG\s0 module sets the default internal \s-1EXIF\s0 string
encoding to \s-1UTF\-8,\s0 but note that this will have no effect unless the
external encoding is also set to something other than the default of \s-1UTF\-8.\s0)
.PP
A few \s-1EXIF\s0 tags (UserComment, GPSProcessingMethod and GPSAreaInformation)
support a designated internal text encoding, with values stored as \s-1ASCII,\s0
Unicode (\s-1UCS\-2\s0) or \s-1JIS. \s0 When reading these tags, ExifTool converts Unicode
and \s-1JIS\s0 to the external character set specified by the \*(L"Charset\*(R"
option, or to \s-1UTF\-8\s0 by default.  \s-1ASCII\s0 text is not converted. When writing,
text is stored as \s-1ASCII\s0 unless the string contains special characters, in
which case it is converted from the external character set (\s-1UTF\-8\s0 by
default), and stored as Unicode. ExifTool writes Unicode in native \s-1EXIF\s0 byte
ordering by default, but the byte order may be specified by setting the
ExifUnicodeByteOrder tag (see the
Extra Tags documentation).
.PP
The \s-1EXIF \*(L"XP\*(R"\s0 tags (XPTitle, XPComment, etc) are always stored as
little-endian Unicode (\s-1UCS\-2\s0), and are read and written using the specified
character set.
.SS "\s-1IPTC\s0"
.IX Subsection "IPTC"
The value of the IPTC:CodedCharacterSet tag determines how the internal \s-1IPTC\s0
string values are interpreted.  If CodedCharacterSet exists and has a value
of '\s-1UTF8\s0' (or '\s-1ESC\s0 % G') then string values are assumed to be stored as
\&\s-1UTF\-8,\s0 otherwise Windows Latin1 (cp1252, 'Latin') coding is assumed by
default, but this can be changed with the \*(L"CharsetIPTC\*(R" option.  When
reading, these strings are converted to the character set specified by the
\&\*(L"Charset\*(R" option.  When writing, the inverse conversions are performed. 
No conversion is done if the internal (\s-1IPTC\s0) and external (ExifTool)
character sets are the same.  Note that \s-1ISO 2022\s0 character set shifting is
not supported.  Instead, a warning is issued and the string is not converted
if an \s-1ISO 2022\s0 shift code is encountered.  See <http://www.iptc.org/IIM/>
for the official \s-1IPTC\s0 specification.
.PP
ExifTool may be used to convert \s-1IPTC\s0 values to a different internal
encoding.  To do this, all \s-1IPTC\s0 tags must be rewritten along with the
desired value of CodedCharacterSet.  For example, the following command
changes the internal \s-1IPTC\s0 encoding to \s-1UTF\-8 \s0(from Windows Latin1 unless
CodedCharacterSet was already '\s-1UTF8\s0'):
.PP
.Vb 1
\&  exiftool \-tagsfromfile @ \-iptc:all \-codedcharacterset=utf8 a.jpg
.Ve
.PP
or from Windows Latin2 (cp1250) to \s-1UTF\-8:\s0
.PP
.Vb 2
\&  exiftool \-tagsfromfile @ \-iptc:all \-codedcharacterset=utf8 \e
\&  \-charset iptc=latin2 a.jpg
.Ve
.PP
and this command changes it back from \s-1UTF\-8\s0 to Windows Latin1 (cp1252):
.PP
.Vb 1
\&  exiftool \-tagsfromfile @ \-iptc:all \-codedcharacterset= a.jpg
.Ve
.PP
or to Windows Latin2:
.PP
.Vb 2
\&  exiftool \-tagsfromfile @ \-iptc:all \-codedcharacterset= \e
\&  \-charset iptc=latin2 a.jpg
.Ve
.PP
Unless CodedCharacterSet is '\s-1UTF8\s0', applications have no reliable way to
determine the \s-1IPTC\s0 character encoding.  For this reason, it is recommended
that CodedCharacterSet be set to '\s-1UTF8\s0' when creating new \s-1IPTC.\s0
.PP
(Note: Here, \*(L"\s-1IPTC\*(R"\s0 Refers to the older \s-1IPTC IIM\s0 format.  The more recent
\&\s-1IPTC\s0 Core and Extension specifications actually use the \s-1XMP\s0 format.)
.SS "\s-1XMP\s0"
.IX Subsection "XMP"
Exiftool reads \s-1XMP\s0 encoded as \s-1UTF\-8, UTF\-16\s0 or \s-1UTF\-32,\s0 and converts them all
to \s-1UTF\-8\s0 internally.  Also, all \s-1XML\s0 character entity references and numeric
character references are converted.  When writing, ExifTool always encodes
\&\s-1XMP\s0 as \s-1UTF\-8,\s0 converting the following 5 characters to \s-1XML\s0 character
references: & < > ' ".  By default no further
conversion is performed, however if the \*(L"Charset\*(R" option is other than
\&'\s-1UTF8\s0' then text is converted to/from a specified character set when
reading/writing.
.SS "\s-1PNG\s0"
.IX Subsection "PNG"
\&\s-1PNG\s0 TextualData tags are
stored as tEXt, zTXt and iTXt chunks in \s-1PNG\s0 images.  The tEXt and zTXt
chunks use \s-1ISO 8859\-1\s0 encoding, while iTXt uses \s-1UTF\-8. \s0 When reading,
ExifTool converts all \s-1PNG\s0 textual data to the character set specified by the
\&\*(L"Charset\*(R" option.  When writing, ExifTool generates a tEXt chunk (or zTXt
with the \*(L"Compress\*(R" option) if the text doesn't contain special characters
or if Latin encoding is specified; otherwise an iTXt chunk is used and the
text is converted from the specified character set and stored as \s-1UTF\-8.\s0
.SS "\s-1JPEG\s0 Comment"
.IX Subsection "JPEG Comment"
The encoding for the \s-1JPEG\s0 Comment (\s-1COM\s0 segment) is not specified, so
ExifTool reads/writes this text without conversion.
.SS "\s-1ID3\s0"
.IX Subsection "ID3"
The ID3v1 specification officially supports only \s-1ISO 8859\-1\s0 encoding (a
subset of Windows Latin1), although some applications may incorrectly use
other character sets.  By default ExifTool converts ID3v1 text from Latin to
the character set specified by the \*(L"Charset\*(R" option.  However, the
internal ID3v1 charset may be specified with the \*(L"CharsetID3\*(R" option.  The
encoding for ID3v2 information is stored in the file, so ExifTool converts
ID3v2 text from this encoding to the character set specified by the
\&\*(L"Charset\*(R" option. ExifTool does not currently write \s-1ID3\s0 information.
.SS "\s-1PDF\s0"
.IX Subsection "PDF"
\&\s-1PDF\s0 text strings are stored in either PDFDocEncoding (similar to Windows
Latin1) or Unicode (\s-1UCS\-2\s0).  When reading, ExifTool converts to the
character set specified by the \*(L"Charset\*(R" option.  When writing, ExifTool
encodes input text from the specified character set as Unicode only if the
string contains special characters, otherwise PDFDocEncoding is used.
.SS "Photoshop"
.IX Subsection "Photoshop"
Some Photoshop resource names are stored as Pascal strings with unknown
encoding.  By default, ExifTool assumes MacRoman encoding and converts this
to \s-1UTF\-8,\s0 but the internal and external character sets may be specified with
\&\*(L"CharsetPhotoshop\*(R" and \*(L"Charset\*(R" options respectively.
.SS "QuickTime"
.IX Subsection "QuickTime"
QuickTime text strings may be stored in a variety of poorly document
formats. ExifTool does its best to decode these according to the \*(L"Charset\*(R"
option setting.  For some QuickTime strings, ExifTool assumes a default
encoding of MacRoman, but this may be changed with the \*(L"CharsetQuickTime\*(R"
option.
.SS "\s-1AIFF\s0"
.IX Subsection "AIFF"
\&\s-1AIFF\s0 strings are assumed to be stored in MacRoman, and are converted
according to the \*(L"Charset\*(R" option when reading.
.SS "\s-1MIE\s0"
.IX Subsection "MIE"
\&\s-1MIE\s0 strings are stored as either \s-1UTF\-8\s0 or \s-1ISO 8859\-1.\s0 When reading, \s-1UTF\-8\s0
strings are converted according to the \*(L"Charset\*(R" option, and \s-1ISO 8859\-1\s0
strings are never converted.  When writing, input strings are converted from
the specified character set to \s-1UTF\-8. \s0 The resulting strings are stored as
\&\s-1UTF\-8\s0 if they contain multi-byte \s-1UTF\-8\s0 character sequences, otherwise they
are stored as \s-1ISO 8859\-1.\s0
.SS "Vorbis"
.IX Subsection "Vorbis"
Vorbis comments are stored as \s-1UTF\-8,\s0 and are converted to the character set
specified by the \*(L"Charset\*(R" option.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2003\-2016, Phil Harvey
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Many people have helped in the development of ExifTool through their bug
reports, comments and suggestions, and/or additions to the code.  See the
\&\s-1ACKNOWLEDGEMENTS\s0 in the individual Image::ExifTool modules and in
html/index.html of the Image::ExifTool distribution package for a list of
people who have contributed to this project.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIexiftool\fR\|(1),
\&\fIImage::ExifTool::TagNames\fR\|(3pm),
\&\fIImage::ExifTool::Shortcuts\fR\|(3pm),
Image::ExifTool::Shift.pl,
\&\fIImage::Info\fR\|(3pm),
\&\fIImage::MetaData::JPEG\fR\|(3pm)
