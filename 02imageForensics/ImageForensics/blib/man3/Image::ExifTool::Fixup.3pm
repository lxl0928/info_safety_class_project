.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Image::ExifTool::Fixup 3pm"
.TH Image::ExifTool::Fixup 3pm "2016-05-29" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Image::ExifTool::Fixup \- Utility to handle pointer fixups
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Image::ExifTool::Fixup;
\&
\&    $fixup = new Image::ExifTool::Fixup;
\&
\&    # add a new fixup to a pointer at the specified offset in data
\&    $fixup\->AddFixup($offset);
\&
\&    # add a new Fixup object to the tree
\&    $fixup\->AddFixup($subFixup);
\&
\&    $fixup\->{Start} += $shift1;   # shift pointer offsets and values
\&
\&    $fixup\->{Shift} += $shift2;   # shift pointer values only
\&
\&    # recursively apply fixups to the specified data
\&    $fixup\->ApplyFixups(\e$data);
\&
\&    $fixup\->Dump();               # dump debugging information
\&
\&    $fixup\->IsEmpty();            # return true if no offsets to fix
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains the code to keep track of pointers in memory and to
shift these pointers as required.  It is used by ExifTool to maintain the
pointers in image file directories (\s-1IFD\s0's).
.SH "NOTES"
.IX Header "NOTES"
Keeps track of pointers with different byte ordering, and relies on
\&\fIImage::ExifTool::GetByteOrder()\fR to determine the current byte ordering
when adding new pointers to a fixup.
.PP
Maintains a hierarchical list of fixups so that the whole hierarchy can
be shifted by a simple shift at the base.  Hierarchy is collapsed to a
linear list when \fIApplyFixups()\fR is called.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright 2003\-2016, Phil Harvey (phil at owl.phy.queensu.ca)
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIImage::ExifTool\fR\|(3pm)
